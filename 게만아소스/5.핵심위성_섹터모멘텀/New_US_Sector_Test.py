'''

Î∞±ÌÖåÏä§ÌåÖÏùÄ
https://blog.naver.com/zacra/223180500307
ÏúÑ Ìè¨Ïä§ÌåÖÏùÑ Ï∞∏Í≥†ÌïòÏó¨ (Í∏∞Í∞Ñ Ï°∞Ï†à Î∞©Î≤ï Ìè¨Ìï®) ÎÇ¥ PCÏóêÏÑú ÌïòÏãúÎäî Í≤ÉÏùÑ Í∂åÏû•Ìï©ÎãàÎã§. (Í∑∏ÎûòÏïº Ìà¨Ïûê ÏÑ±Í≥º Í∑∏ÎûòÌîÑÎèÑ ÎÇòÏòµÎãàÎã§!)


Í¥ÄÎ†® Ìè¨Ïä§ÌåÖ

ÎØ∏Íµ≠ ÌïµÏã¨ÏúÑÏÑ± + ÏÑπÌÑ∞Î™®Î©òÌÖÄ Ï†ÑÎûµ Í≤ÄÏ¶ùÌïòÍ≥† Í∞úÏÑ†ÌïòÍ∏∞
https://blog.naver.com/zacra/223135937564

ÏúÑ Ìè¨Ïä§ÌåÖÏùÑ Íº≠ Ï∞∏Í≥†ÌïòÏÑ∏Ïöî!!!


üìå Í≤åÎßåÏïÑÏùò Î™®Îì† ÏΩîÎìúÎäî ÌäπÏ†ï Ï¢ÖÎ™© Ï∂îÏ≤úÏù¥ÎÇò Ìà¨Ïûê Í∂åÏú†Î•º ÏúÑÌïú Í≤ÉÏù¥ ÏïÑÎãôÎãàÎã§.  
Ï†úÍ≥µÎêú Ï†ÑÎûµÏùÄ ÌïôÏäµ Î∞è ÌÖåÏä§Ìä∏ Î™©Ï†ÅÏúºÎ°ú Íµ¨ÏÑ±Îêú ÏòàÏãú ÏΩîÎìúÏù¥Î©∞
Ïã§Ï†ú Ìà¨Ïûê ÌåêÎã® Î∞è Ïã§ÌñâÏùÄ Ï†ÑÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©Ïûê Î≥∏Ïù∏Ïùò Ï±ÖÏûÑÏûÖÎãàÎã§.
   

Ï£ºÏãù/ÏΩîÏù∏ ÏûêÎèôÎß§Îß§ FAQ
https://blog.naver.com/zacra/223203988739

FAQÎ°ú Ìï¥Í≤∞ ÏïàÎêòÎäî Í∏∞Ïà†Ï†ÅÏù∏ Î¨∏Ï†úÎäî ÌÅ¥ÎûòÏä§101 Í∞ïÏùòÏùò ÎåìÍ∏ÄÏù¥ÎÇò ÏúÑ Ìè¨Ïä§ÌåÖÏóê ÎåìÍ∏ÄÎ°ú ÏïåÎ†§Ï£ºÏÑ∏Ïöî.
ÌååÏù¥Ïç¨ ÏΩîÎî©Ïóê ÎåÄÌïú ÎãµÎ≥ÄÎßå Í∞ÄÎä•Ìï©ÎãàÎã§. ÌòÑÌñâÎ≤ï ÏÉÅ Ìà¨Ïûê Í¥ÄÎ†® ÏßàÎ¨∏ÏùÄ ÎãµÎ≥Ä Î∂àÍ∞ÄÌïòÎã§Îäî Ï†ê ÏïåÎ†§ÎìúÎ†§Ïöî!

  
'''

import KIS_Common as Common
import pandas as pd
import pprint
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

#Í≥ÑÏ¢å ÏÑ†ÌÉù.. "VIRTUAL" Îäî Î™®Ïùò Í≥ÑÏ¢å!
Common.SetChangeMode("VIRTUAL") #REAL or VIRTUAL


#ÎãπÏó∞Ìïú Ïù¥ÏïºÍ∏∞ÏßÄÎßå VOOÎì±ÏúºÎ°ú Î≥ÄÍ≤ΩÌï¥ÏÑú ÌÖåÏä§ÌåÖÎèÑ Í∞ÄÎä•Ìï©ÎãàÎã§.
Snp500ETF = "SPY"
##################################################################################################
InvestStockList = [] #ÏïÑÎûò Í∞ôÏùÄ ÏòàÏãúÎ°ú ÌÖåÏä§Ìä∏Ìï† Ï¢ÖÎ™©ÏùÑ Ï∂îÍ∞ÄÌïòÏÖîÏöî
#InvestStockList = [Snp500ETF,"XLB","XLC","XLE","XLF","XLI","XLK","XLP","XLU","XLV","XLY","XLRE"]
##################################################################################################


#Ïù¥Î†áÍ≤å ÏßÅÏ†ë Í∏àÏï°ÏùÑ ÏßÄÏ†ï
TotalMoney = 10000
FirstInvestMoney = TotalMoney

print("ÌÖåÏä§Ìä∏ÌïòÎäî Ï¥ù Í∏àÏï°: ", format(round(TotalMoney), ','))



StockDataList = list()

for stock_code in InvestStockList:
    print("..",stock_code,"..")
    stock_data = dict()
    stock_data['stock_code'] = stock_code
    stock_data['stock_name'] = stock_code#KisKR.GetStockName(stock_code)
    stock_data['try'] = 0
    stock_data['success'] = 0
    stock_data['fail'] = 0
    stock_data['accRev'] = 0

    StockDataList.append(stock_data)

pprint.pprint(StockDataList)


#ÏÇ¨Ïã§ ÎØ∏Íµ≠ÏóêÏÑ† ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏßÄÎßå ÌïúÍµ≠ÏóêÏÑ† Ïú†Ïö©ÌïòÎãàÍπê Í∑∏ÎÉ• ÎÇ¥ÎπÑÎëêÏû•~
def GetStockName(stock_code, StockDataList):
    result_str = stock_code
    for stock_data in StockDataList:
        if stock_code == stock_data['stock_code']:
            result_str = stock_data['stock_name']
            break

    return result_str
    
    
#################################################################
#Ï†ÑÎûµ Î∞±ÌÖåÏä§ÌåÖ ÏãúÏûë ÎÖÑÎèÑ ÏßÄÏ†ï!!!
StartYear = 2020
#StartYear = 2000
#################################################################

stock_df_list = []
stock_df_list_withSPY = []

for stock_code in InvestStockList:
    
    #################################################################
    #################################################################
    df = Common.GetOhlcv("US", stock_code,1622) #ÏµúÍ∑º 3ÎÖÑÏó¨Ïùò Îç∞Ïù¥ÌÑ∞
    #df = Common.GetOhlcv("US", stock_code,10000) #Ï†ÑÏ≤¥ Í∏∞Í∞Ñ ÎÑâÎÑâÌûà 1ÎßåÍ∞ú Îç∞Ïù¥ÌÑ∞!
    #################################################################
    #################################################################


    df['prevClose'] = df['close'].shift(1)


    df['prev1MonthPrice'] = df['close'].shift(20) 
    df['prev3MonthPrice'] = df['close'].shift(60)  
    df['prev6MonthPrice']  = df['close'].shift(120)  
    df['prev12MonthPrice']  = df['close'].shift(240)

    #Î™®Î©òÌÖÄ Ïä§ÏΩîÏñ¥!! Ïù¥Í≤å ÎßàÏù¥ÎÑàÏä§ÎùºÎ©¥ Ìà¨Ïûê ÎπÑÏ§ëÏùÑ 50% Í∞êÏÇºÌïúÎã§ (ÏÑπÌÑ∞Îßå~)
    df['MomenTumScore'] =  (((df['prevClose'] - df['prev1MonthPrice']) / df['prev1MonthPrice']) * 12.0) + (((df['prevClose'] - df['prev3MonthPrice']) / df['prev3MonthPrice']) * 4.0) + (((df['prevClose'] - df['prev6MonthPrice']) / df['prev6MonthPrice']) * 2.0) + (((df['prevClose'] - df['prev12MonthPrice']) / df['prev12MonthPrice']) * 1.0)


    #20Í±∞ÎûòÏùº(Ï¶â ÏïΩ 1Îã¨) Ï¥ù 10Í∞úÏùò Îç∞Ïù¥ÌÑ∞Î°ú 10Í∞úÏõî ÌèâÍ∑† Î™®Î©òÌÖÄÏùÑ Íµ¨ÌïúÎã§!
    specific_days = list()

    for i in range(1,11):
        st = i * 20
        specific_days.append(st)

    for day in specific_days:

        column_name = f'Momentum_{day}'
        
        df[column_name] = (df['prevClose'] > df['close'].shift(day)).astype(int)

    df['Average_Momentum'] = df[[f'Momentum_{day}' for day in specific_days]].sum(axis=1) / 10


    df.dropna(inplace=True) #Îç∞Ïù¥ÌÑ∞ ÏóÜÎäîÍ±¥ ÎÇ†Î¶∞Îã§!

   

    data_dict = {stock_code: df}

    #SPYÎûë ÎÇòÎ®∏ÏßÄ ÏÑπÌÑ∞ETFÎì§ Íµ¨Î∂ÑÌï¥ÏÑú Îã§Î•∏ Î¶¨Ïä§Ìä∏Ïóê Ï†ÄÏû•
    if stock_code == Snp500ETF:
        stock_df_list_withSPY.append(data_dict)
    else:
        stock_df_list.append(data_dict)
        
    print("---stock_code---", stock_code , " len ",len(df))
    pprint.pprint(df)




#ÏÑπÌÑ∞ETFÎì§Ïùò ÌÜµÌï© Îç∞Ïù¥ÌÑ∞
combined_df = pd.concat([list(data_dict.values())[0].assign(stock_code=stock_code) for data_dict in stock_df_list for stock_code in data_dict])
combined_df.sort_index(inplace=True)
pprint.pprint(combined_df)
print(" len(combined_df) ", len(combined_df))

#SPY Îç∞Ïù¥ÌÑ∞Îäî Îî∞Î°ú Í¥ÄÎ¶¨
combined_withSPY_df = pd.concat([list(data_dict.values())[0].assign(stock_code=stock_code) for data_dict in stock_df_list_withSPY for stock_code in data_dict])
combined_withSPY_df.sort_index(inplace=True)
pprint.pprint(combined_withSPY_df)
print(" len(combined_df) ", len(combined_withSPY_df))





IsBuy = False #Îß§Ïàò ÌñàÎäîÏßÄ Ïó¨Î∂Ä
BUY_PRICE = 0  #Îß§ÏàòÌïú Í∏àÏï°! 

TryCnt = 0      #Îß§Îß§ÌöüÏàò
SuccesCnt = 0   #ÏùµÏ†à Ïà´Ïûê
FailCnt = 0     #ÏÜêÏ†à Ïà´Ïûê


fee = 0.0025 #ÏàòÏàòÎ£å+ÏÑ∏Í∏à+Ïä¨Î¶¨ÌîºÏßÄÎ•º Îß§ÏàòÎß§ÎèÑÎßàÎã§ 0.25%Î°ú ÏÑ∏ÌåÖ!
IsFirstDateSet = False
FirstDateStr = ""


NowInvestCode = ""
InvestMoney = TotalMoney


##################################################################################################
##################################################################################################
TopCnt = 5 #ÏµúÎåÄ 5Í∞ú ÏÑπÌÑ∞!

DivNum = TopCnt

#0.2 : 0.8Î°ú SPY 20% : ÏÑπÌÑ∞Î™®Î©òÌÖÄ 80% ÎπÑÏ§ëÏúºÎ°ú ÏÑ∏ÌåÖÎêòÏñ¥ ÏûàÎã§
SpyRate = 0.2
SectorRate = 0.8

InvestSpy = (InvestMoney * SpyRate ) * (1.0 - fee)     #0.2 
InvestMoneyCell = (InvestMoney * SectorRate  / (DivNum + 0)) * (1.0 - fee) #0.8 
##################################################################################################
##################################################################################################
RemainInvestMoney = InvestMoney



ResultList = list() #Î∞±ÌÖåÏä§ÌåÖ Îç∞Ïù¥ÌÑ∞ Îì§Ïñ¥Í∞à Î¶¨Ïä§Ìä∏

TotalMoneyList = list() #Ìà¨ÏûêÍ∏à Îç∞Ïù¥ÌÑ∞Í∞Ä Îì§Ïñ¥Í∞à Î¶¨Ïä§Ìä∏

NowInvestList = list() #Ìà¨ÏûêÏ§ëÏù∏ Ìï≠Î™©Ïùò Î¶¨Ïä§Ìä∏

IsSPY_Buy = False


i = 0
# Iterate over each date
for date in combined_df.index.unique():
 
    
    #ÎÇ†Ïßú Ï†ïÎ≥¥Î•º ÌöçÎìù
    date_format = "%Y-%m-%d %H:%M:%S"
    date_object = None

    #Îç∞Ïù¥ÌÑ∞Î•º Ïñ¥ÎîîÏÑú Í∞ÄÏ†∏Ïò§ÎäêÎÉêÏóê Îî∞ÎùºÏÑú(ÌïúÌà¨Ïù∏ÏßÄ ÏïºÌõÑÏù∏ÏßÄ) ÎÇ†Ïûê ÌÉÄÏûéÏù¥ Îã§Î•¥Í∏∞Ïóê Ï≤òÎ¶¨!
    try:
        date_object = datetime.strptime(str(date), date_format)
    
    except Exception as e:
        try:
            date_format = "%Y%m%d"
            date_object = datetime.strptime(str(date), date_format)

        except Exception as e2:
            date_format = "%Y-%m-%d"
            date_object = datetime.strptime(str(date), date_format)
            
            

    ##########################################################################################################################
    ##########################################################################################################################
    #ÏÑπÌÑ∞ Î™®Î©òÌÖÄ TOPÏùÑ Íµ¨ÌïòÎäîÎç∞ ÌèâÍ∑† Î™®Î©òÌÖÄÏùÑ ÏÇ¨Ïö©ÌïòÎèÑÎ°ù ÏÑ∏ÌåÖÎêòÏñ¥ ÏûàÎã§. ÏñºÎßàÎì†ÏßÄ Î≥ÄÌòï Í∞ÄÎä•!!!
    pick_stocks = combined_df.loc[combined_df.index == date].groupby('stock_code')['Average_Momentum'].max().nlargest(TopCnt) #ÏÉÅÏúÑ nÍ∞ú!
    ##########################################################################################################################
    ##########################################################################################################################

    i += 1



    items_to_remove = list()

    #Ìà¨ÏûêÏ§ëÏù∏ Ï¢ÖÎ™©ÏùÑ ÏàúÌöåÌïòÎ©∞ Ï≤òÎ¶¨!
    for investData in NowInvestList:
       # pprint.pprint(investData)

        stock_code = investData['stock_code'] 
        
        if investData['InvestMoney'] > 0:

            stock_data = combined_df[(combined_df.index == date) & (combined_df['stock_code'] == stock_code)] #ÏÑπÌÑ∞ ETF
            stock_spy_data = combined_withSPY_df[(combined_withSPY_df.index == date) & (combined_withSPY_df['stock_code'] == stock_code)] #SPY ETF
            

            if len(stock_data) == 1 or len(stock_spy_data) == 1:
        
                #################################################################################################################
                #Îß§ÏùºÎß§ÏùºÏùò Îì±ÎùΩÎ•†ÏùÑ Î∞òÏòÅÌïúÎã§!
                NowClosePrice = 0
                PrevClosePrice = 0

                if len(stock_data) == 1:

                    NowClosePrice = stock_data['close'].values[0]
                    PrevClosePrice = stock_data['prevClose'].values[0] 

                else:

                    NowClosePrice = stock_spy_data['close'].values[0]
                    PrevClosePrice = stock_spy_data['prevClose'].values[0] 

                investData['InvestMoney'] = investData['InvestMoney'] *  (1.0 + ((NowClosePrice - PrevClosePrice ) / PrevClosePrice))
                #################################################################################################################


                #################################################################################################################
                #ÏßÄÏ†ïÌïú TOPÏàúÏúÑÏóêÏÑú Î≤óÏñ¥ÎÇ¨ÎäîÏßÄ Ïó¨Î∂ÄÎ•º Í≤∞Ï†ï!!!!
                IsTOPIn = False
                for stock_code_t in pick_stocks.index:
                    if stock_code_t == stock_code:
                        coin_top_data = combined_df[(combined_df.index == date) & (combined_df['stock_code'] == stock_code_t)]
                        if len(coin_top_data) == 1:
                            IsTOPIn = True
                            break
                #################################################################################################################

                IsReblanceDay = False
                #################################################################################################################
                #Ïù¥ Î∂ÄÎ∂ÑÏù¥ ÏõîÎ≥Ñ Î¶¨Î∞∏Îü∞Ïã±ÏùÑ Í∞ÄÎä•ÌïòÍ≤å ÌïòÎäî Î∂ÄÎ∂Ñ~ Ïöî ÏΩîÎìúÎ∏îÎü≠ÏùÑ Ï£ºÏÑùÏ≤òÎ¶¨ÌïòÎ©¥ Îß§ÏùºÎß§Ïùº Ï≤¥ÌÅ¨Ìï¥ TOPÏóê ÎßûÎäî Ï¢ÖÎ™©ÏúºÎ°ú Î¶¨Î∞∏Îü∞Ïã±ÌïòÍ≤å ÎêúÎã§
                if investData['EntryMonth'] != date_object.strftime("%Y%m"):
                    investData['EntryMonth'] = date_object.strftime("%Y%m")
                    IsReblanceDay = True

                #ÏõîÏù¥ Î≥ÄÎèôÏóÜÎã§Î©¥ ÌÉëÏóê ÏÜçÌïúÎã§Í≥† ÏπúÎã§!-ÏõîÎ≥Ñ Î¶¨Î∞∏Îü∞Ïã±ÏùÑ ÏúÑÌï¥!
                else:
                    IsTOPIn = True
                #################################################################################################################
               

                
                #ÏÑπÌÑ∞ETFÍ∞Ä TOPÏóê Î™ªÎì§Ïñ¥ Í∞îÎã§Í≥† ÏµúÏ¢Ö Í≤∞Ï†ïÎêòÎ©¥ Îß§ÎèÑ ÏßÑÌñâ!!!!
                if IsTOPIn == False and investData['stock_code'] != Snp500ETF:


                    #ÏßÑÏûÖ(Îß§Ïàò)Í∞ÄÍ≤© ÎåÄÎπÑ Î≥ÄÎèôÎ•†
                    Rate = (NowClosePrice - investData['BuyPrice']) / investData['BuyPrice']


                    RevenueRate = (Rate - fee)*100.0 #ÏàòÏùµÎ•† Í≥ÑÏÇ∞


                    ReturnMoney = (investData['InvestMoney'] * (1.0 - fee))  #ÏàòÏàòÎ£å Î∞è ÏÑ∏Í∏à, Ïä¨Î¶¨ÌîºÏßÄ Î∞òÏòÅ!


                    TryCnt += 1

                    if RevenueRate > 0: #ÏàòÏùµÎ•†Ïù¥ 0Î≥¥Îã§ ÌÅ¨Îã§Î©¥ ÏùµÏ†àÌïú ÏÖàÏù¥Îã§!
                        SuccesCnt += 1
                    else:
                        FailCnt += 1
        
                    #Ï¢ÖÎ™©Î≥Ñ ÏÑ±Í≥ºÎ•º Í∏∞Î°ùÌïúÎã§.
                    for stock_data in StockDataList:
                        if stock_code == stock_data['stock_code']:
                            stock_data['try'] += 1
                            if RevenueRate > 0:
                                stock_data['success'] += 1
                            else:
                                stock_data['fail'] +=1
                            stock_data['accRev'] += RevenueRate


                    
                    RemainInvestMoney += ReturnMoney
                    investData['InvestMoney'] = 0


                    #pprint.pprint(NowInvestList)

                    NowInvestMoney = 0
                    for iData in NowInvestList:
                        NowInvestMoney += iData['InvestMoney']

                    InvestMoney = RemainInvestMoney + NowInvestMoney

                    print(GetStockName(stock_code, StockDataList), "(",stock_code, ") ", str(date), " " ,i, " >>>>>>>>>>>>>>>>> Îß§ÎèÑ! Îß§ÏàòÏùº:",investData['Date']," Îß§ÏàòÍ∞Ä:",str(investData['BuyPrice']) ," Îß§ÏàòÍ∏à:",str(investData['FirstMoney'])," ÏàòÏùµÎ•†: ", round(RevenueRate,2) , "%", " ,ÌöåÏàòÍ∏à:", round(ReturnMoney,2)  , " Îß§ÎèÑÍ∞Ä", NowClosePrice)
                              

                    items_to_remove.append(investData) #Ìà¨ÏûêÏ§ë Î¶¨Ïä§Ìä∏ÏóêÏÑú Ï†úÍ±∞Ìï¥ÏïºÌïúÎã§

                else:

                    if IsReblanceDay == True: #Î¶¨Î∞∏Îü∞Ïã± ÎÇ†Ïù¥ÎùºÎ©¥ Ïó¨Í∏∞Îäî SPY Í∑∏Î¶¨Í≥† Ïù¥ÎØ∏ Ìà¨ÏûêÏ§ëÏù∏ ÏÑπÌÑ∞ETFÍ∞Ä ÏûàÎã§
  
                        investData['IsRebalanceGo'] = True
                         


                    
                #'''
                
    #Ïã§Ï†úÎ°ú Ïó¨Í∏∞ÏÑú Ï†úÍ±∞
    for item in items_to_remove:
        NowInvestList.remove(item)
        
        
    

    #################################################################################################################
    ##################### Î¶¨Î∞∏Îü∞Ïã± Ìï†Îïå Ìà¨Ïûê ÎπÑÏ§ëÏùÑ ÎßûÏ∂∞Ï£ºÎäî ÏûëÏóÖ #############################
    # ÌÖåÏä§ÌåÖ Í≤∞Í≥º ÏÑ±Í≥ºÍ∞Ä ÏïàÏ¢ãÏïÑÏÑú Ï†úÏô∏  ###
    # ÌïòÏßÄÎßå Ï∂îÍ∞ÄÏ†ÅÏúºÎ°ú SPY Îßå Î¶¨Î∞∏Îü∞Ïã± ÏßÑÌñâ - Ïù¥Ïú†Îäî ÏÑπÌÑ∞Îäî ÏàúÏúÑÍ∞Ä Î∞îÎÄåÎ©¥ ÏûêÎèôÏ†ÅÏúºÎ°ú ÎäòÏñ¥ÎÇú Ìà¨ÏûêÍ∏àÏóê ÎßûÍ≤å Ìà¨ÏûêÍ∞Ä ÎêòÏßÄÎßå
    # ÌïúÎ≤à Îß§ÏàòÌïòÍ≥† ÏïÑÎ¨¥Í≤ÉÎèÑ ÏïàÌïòÎäî SPYÏùò Í≤ΩÏö∞ Í≥ÑÏ¢åÏóê Ìà¨ÏûêÍ∏àÏù¥ ÏÉàÎ°ú Îì§Ïñ¥Ïò®Îã§ÎçòÍ∞ÄÏóê ÎåÄÏùëÏù¥ ÏïàÎêòÎãàÍπê SPYÎßå Îß§Ïõî ÎπÑÏ§ëÏóê ÎßûÍ≤å Î¶¨Î∞∏Îü∞Ïã±!!!
    #'''
    #ÏõîÏ¥àÏó¨ÏÑú Ïù¥ÎØ∏ Ìà¨ÏûêÏ§ëÏù∏ Ìï≠Î™©Ïùò Î¶¨Î∞∏Îü∞Ïã±Ïù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ ÏßÑÌñâ! Î®ºÏ†Ä Îß§ÎèÑÎ∂ÄÌÑ∞!
    for investData in NowInvestList:

        if investData['IsRebalanceGo'] == True:
            
            if investData['stock_code'] == Snp500ETF:
                

                stock_data = combined_df[(combined_df.index == date) & (combined_df['stock_code'] == investData['stock_code'])] 

                if len(stock_data) == 1:

                    InvestSpyForReblanceTargetMoney = (InvestMoney * SpyRate ) * (1.0 - fee)     #0.2 
                    InvestMoneyCellForReblanceTargetMoney  = (InvestMoney * SectorRate  / (DivNum + 0)) * (1.0 - fee) #0.8 

                    GapInvest = 0
                    if investData['stock_code'] == Snp500ETF:

                        GapInvest = InvestSpyForReblanceTargetMoney - investData['InvestMoney'] #Î™©Ìëú Í∏àÏï°ÏóêÏÑú ÌòÑÏû¨ ÌèâÍ∞ÄÍ∏àÏï°ÏùÑ ÎπºÏÑú Í∞≠ÏùÑ Íµ¨ÌïúÎã§


                    else:

                        GapInvest = InvestMoneyCellForReblanceTargetMoney - investData['InvestMoney'] #Î™©Ìëú Í∏àÏï°ÏóêÏÑú ÌòÑÏû¨ ÌèâÍ∞ÄÍ∏àÏï°ÏùÑ ÎπºÏÑú Í∞≠ÏùÑ Íµ¨ÌïúÎã§!


                    if GapInvest < 0:
                        GapInvest = abs(GapInvest)

                        NowClosePrice = stock_data['close'].values[0]

                        SellAmt = int(GapInvest / NowClosePrice)

                        if SellAmt > 0:

                            RealSellMoney = SellAmt * NowClosePrice

                            ReturnMoney = (RealSellMoney * (1.0 - fee))  #ÏàòÏàòÎ£å Î∞è ÏÑ∏Í∏à, Ïä¨Î¶¨ÌîºÏßÄ Î∞òÏòÅ!

                            investData['InvestMoney'] -= RealSellMoney

                            RemainInvestMoney += ReturnMoney

                            investData['IsRebalanceGo'] = False
                            

                            print(investData['stock_code'], str(date), " " ,i, " >>>>>>>>>>>>>>>>> ÏùºÎ∂Ä Îß§ÎèÑ!(Î¶¨Î∞∏Îü∞Ïã±) ,Îß§ÎèÑÍ∏àÏï°:", round(RealSellMoney,2) ,  " Îß§ÎèÑÍ∞Ä:",NowClosePrice)
                            
    #ÏõîÏ¥àÏó¨ÏÑú Ïù¥ÎØ∏ Ìà¨ÏûêÏ§ëÏù∏ Ìï≠Î™©Ïùò Î¶¨Î∞∏Îü∞Ïã±Ïù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ ÏßÑÌñâ! Îß§Ïàò!
    for investData in NowInvestList:

        if investData['IsRebalanceGo'] == True: #Î¶¨Î∞∏Îü∞Ïã± ÎßàÏßÄÎßâ Îß§ÏàòÎã®Í≥ÑÏù¥ÎãàÍπê
            investData['IsRebalanceGo'] = False #Î¶¨Î∞∏Îü∞Ïã±ÏùÄ Î¨¥Ï°∞Í±¥ Ï¢ÖÎ£å!
            
            if investData['stock_code'] == Snp500ETF:


                stock_data = combined_df[(combined_df.index == date) & (combined_df['stock_code'] == investData['stock_code'])] 

                if len(stock_data) == 1:

                    InvestSpyForReblanceTargetMoney = (InvestMoney * SpyRate ) * (1.0 - fee)     #0.2 
                    InvestMoneyCellForReblanceTargetMoney  = (InvestMoney * SectorRate  / (DivNum + 0)) * (1.0 - fee) #0.8 

                    GapInvest = 0
                    if investData['stock_code'] == Snp500ETF:

                        GapInvest = InvestSpyForReblanceTargetMoney - investData['InvestMoney'] #Î™©Ìëú Í∏àÏï°ÏóêÏÑú ÌòÑÏû¨ ÌèâÍ∞ÄÍ∏àÏï°ÏùÑ ÎπºÏÑú Í∞≠ÏùÑ Íµ¨ÌïúÎã§


                    else:

                        GapInvest = InvestMoneyCellForReblanceTargetMoney - investData['InvestMoney'] #Î™©Ìëú Í∏àÏï°ÏóêÏÑú ÌòÑÏû¨ ÌèâÍ∞ÄÍ∏àÏï°ÏùÑ ÎπºÏÑú Í∞≠ÏùÑ Íµ¨ÌïúÎã§!


                    if GapInvest > 0:
                        GapInvest = abs(GapInvest)

                        NowClosePrice = stock_data['close'].values[0]

                        BuyAmt = int(GapInvest / NowClosePrice)

                        if BuyAmt > 0:

                            RealBuyMoney = BuyAmt * NowClosePrice

                            investData['InvestMoney'] += RealBuyMoney



                            OutMoney = (RealBuyMoney * (1.0 + fee))  #ÏàòÏàòÎ£å Î∞è ÏÑ∏Í∏à, Ïä¨Î¶¨ÌîºÏßÄ Î∞òÏòÅ!

                            RemainInvestMoney -= OutMoney


                            print(investData['stock_code'], str(date), " " ,i, " >>>>>>>>>>>>>>>>> ÏùºÎ∂Ä Îß§Ïàò!(Î¶¨Î∞∏Îü∞Ïã±) ,Îß§ÏàòÍ∏àÏï°:", round(RealBuyMoney,2) ,  " Îß§ÏàòÍ∞Ä:",NowClosePrice)
    #'''
    #################################################################################################################
    #################################################################################################################
    
    
    


    #################################################################################################################
    #SPY ETFÎ•º Îß§ÏàòÌïòÎäî Î°úÏßÅÏúºÎ°ú Ï≤òÏùåÏóê Îß§ÏàòÌïúÎí§ Ïú†ÏßÄÌïúÎã§
    spy_data = combined_withSPY_df[(combined_withSPY_df.index == date) & (combined_withSPY_df['stock_code'] == Snp500ETF)]
    if len(spy_data) == 1:

        
        NowClosePrice = spy_data['close'].values[0]

        #ÏïÑÏßÅ Ï≤´ Îß§Ïàò Ï†ÑÏù¥ÎùºÎ©¥..
        if IsSPY_Buy == False:
            
            IsAlReadyInvest = False
            for investData in NowInvestList:
                if Snp500ETF == investData['stock_code']: 
                    IsAlReadyInvest = True
                    break    



            if IsAlReadyInvest == False:
                    
                IsBuyGo = True
                        
                if IsBuyGo == True and int(date_object.strftime("%Y")) >= StartYear:
                    if IsFirstDateSet == False:
                        FirstDateStr = str(date)
                        IsFirstDateSet = True


                    InvestGoMoney = InvestSpy 
                    
            
                    if NowClosePrice > 0:

                        IsSPY_Buy = True


                        BuyAmt = int(InvestGoMoney/  NowClosePrice) #Îß§Ïàò Í∞ÄÎä• ÏàòÎüâÏùÑ Íµ¨ÌïúÎã§!

                        NowFee = (BuyAmt*NowClosePrice) * fee


                        #ÎÇ®ÏùÄ ÎèàÏù¥ ÏûàÎã§Î©¥ Îß§Ïàò ÌïúÎã§!!
                        #ÌòπÏãú ÎÇ®ÏùÄÎèàÏù¥ Î™®ÏûêÎ•¥Î©¥ 1Ï£ºÏî© Ï§ÑÏó¨ÏÑú Îß§Ïàò Í∞ÄÎä•Ìïú ÏàòÎüâÏùÑ Íµ¨ÌïúÎã§.
                        while RemainInvestMoney < (BuyAmt*NowClosePrice) + NowFee:
                            if RemainInvestMoney > NowClosePrice:
                                BuyAmt -= 1
                                NowFee = (BuyAmt*NowClosePrice) * fee
                            else:
                                break


                        RealInvestMoney = (BuyAmt*NowClosePrice) #Ïã§Ï†ú Îì§Ïñ¥Í∞Ñ Ìà¨ÏûêÍ∏à

                        RemainInvestMoney -= (BuyAmt*NowClosePrice) #ÎÇ®ÏùÄ Ìà¨ÏûêÍ∏à!
                        RemainInvestMoney -= NowFee

                        #Í¥ÄÎ¶¨Ìïú Ìà¨Ïûê Îç∞Ïù¥ÌÑ∞!
                        InvestData = dict()

                        InvestData['stock_code'] = Snp500ETF
                        InvestData['InvestMoney'] = RealInvestMoney
                        InvestData['FirstMoney'] = RealInvestMoney
                        InvestData['BuyPrice'] = NowClosePrice
                        InvestData['EntryMonth'] = date_object.strftime("%Y%m")
                        InvestData['IsRebalanceGo'] = False
                        InvestData['Date'] = str(date)



                        NowInvestList.append(InvestData)


                        NowInvestMoney = 0
                        for iData in NowInvestList:
                            NowInvestMoney += iData['InvestMoney']

                        InvestMoney = RemainInvestMoney + NowInvestMoney


                        print(GetStockName(Snp500ETF, StockDataList), "(",Snp500ETF, ") ", str(date), " " ,i, " >>>>>>>>>>>>>>>>> Îß§Ïàò! ,Îß§ÏàòÍ∏àÏï°:", round(RealInvestMoney,2) ,  " Îß§ÏàòÍ∞Ä:",NowClosePrice)
        
       
        
    #################################################################################################################   


    #ÏÑπÌÑ∞ Ìà¨ÏûêÌï† Í∏àÏï° ÏÑ§Ï†ï!
    if TopCnt - len(NowInvestList) + 1 > 0:
        InvestMoneyCell = (RemainInvestMoney / (TopCnt - len(NowInvestList) +1 )) * (1.0 - fee)


    #ÏïÑÏßÅ Î™©ÌëúÌïú Í∞úÏàòÎ•º Ï±ÑÏö∞ÏßÄ Î™ªÌñàÎã§Î©¥ ÏïàÏúºÎ°ú Îß§Ïàò ÏãúÎèÑ!!! 1ÏùÑ ÎπºÏ£ºÎäî Ïù¥Ïú†Îäî SPYÍ∞Ä ÏûàÍ∏∞ ÎïåÎ¨∏Ïóê
    if len(NowInvestList)-1 < TopCnt:


        for stock_code in pick_stocks.index:

            if stock_code == Snp500ETF: #SPYÎäî Ï†ÄÍ∏∞Ïóê ÏóÜÏùÑ ÌÖåÏßÄÎßå 
                continue

            print("-PICK_CODE-" , stock_code)

            
            IsAlReadyInvest = False
            for investData in NowInvestList:
                if stock_code == investData['stock_code']: 
                    IsAlReadyInvest = True
                    break    


            

            if IsAlReadyInvest == False:


                stock_data = combined_df[(combined_df.index == date) & (combined_df['stock_code'] == stock_code)]
                NowClosePrice = stock_data['close'].values[0]



                IsBuyGo = True

                #Îß§ÏàòÌïòÎêò ÏßÄÏ†ïÌïú ÎÖÑÎèÑÎ∂ÄÌÑ∞ Îß§ÏàòÌïúÎã§!!
                if IsBuyGo == True  and len(NowInvestList) -1 < TopCnt and int(date_object.strftime("%Y")) >= StartYear:
                    
                    if IsFirstDateSet == False:
                        FirstDateStr = str(date)
                        IsFirstDateSet = True



                    InvestGoMoney = InvestMoneyCell 
                    
                    #Í±∞ÎûòÎåÄÍ∏àÏùÑ ÌÜµÌïú Ï†úÌïú!!! ETFÏùò Í≤ΩÏö∞ LPÌôúÎèôÏãúÍ∞ÑÏóêÎäî Ïú†ÎèôÏÑ±Ïù¥ Í≥µÍ∏âÎêòÍ∏∞Ïóê Ï†úÌïúÏùÑ ÌïòÏßÄ ÏïäÏïòÎã§. ÎçîÍµ∞Îã§ÎÇò ÎØ∏Íµ≠Ïù∏Îç∞ „Öé
                    '''
                    if InvestGoMoney > stock_data['value_ma'].values[0] / 100:
                        InvestGoMoney = stock_data['value_ma'].values[0] / 100

                    if InvestGoMoney < DolPaPrice*10.0:
                        InvestGoMoney = DolPaPrice*10.0
                    '''



                    if NowClosePrice > 0:

                        #Î™®Î©òÌÖÄ Ïä§ÏΩîÏñ¥Í∞Ä ÏùåÏàòÎùºÎ©¥ ÎπÑÏ§ëÏùÑ Ï†àÎ∞òÏúºÎ°ú Ï§ÑÏó¨Ï§ÄÎã§!!!
                        if stock_data['MomenTumScore'].values[0] < 0:
                            InvestGoMoney *= 0.5
                        

                        BuyAmt = int(InvestGoMoney /  NowClosePrice) #Îß§Ïàò Í∞ÄÎä• ÏàòÎüâÏùÑ Íµ¨ÌïúÎã§!

                        NowFee = (BuyAmt*NowClosePrice) * fee

                        #Îß§ÏàòÌï¥Ïïº ÎêòÎäîÎç∞ ÎÇ®ÏùÄÎèàÏù¥ Î∂ÄÏ°±ÌïòÎã§Î©¥ ÏàòÎüâÏùÑ ÌïòÎÇòÏî© Í∞êÏÜåÏãúÏºú ÎßåÏ°±Ìï† Îïå Îß§ÏàòÌïúÎã§!!
                        while RemainInvestMoney < (BuyAmt*NowClosePrice) + NowFee:
                            if RemainInvestMoney > NowClosePrice:
                                BuyAmt -= 1
                                NowFee = (BuyAmt*NowClosePrice) * fee
                            else:
                                break
                        


                        RealInvestMoney = (BuyAmt*NowClosePrice) #Ïã§Ï†ú Îì§Ïñ¥Í∞Ñ Ìà¨ÏûêÍ∏à

                        RemainInvestMoney -= (BuyAmt*NowClosePrice) #ÎÇ®ÏùÄ Ìà¨ÏûêÍ∏à!
                        RemainInvestMoney -= NowFee


                        InvestData = dict()

                        InvestData['stock_code'] = stock_code
                        InvestData['InvestMoney'] = RealInvestMoney
                        InvestData['FirstMoney'] = RealInvestMoney
                        InvestData['BuyPrice'] = NowClosePrice
                        InvestData['EntryMonth'] = date_object.strftime("%Y%m")
                        InvestData['IsRebalanceGo'] = False
                        InvestData['Date'] = str(date)



                        NowInvestList.append(InvestData)


                        NowInvestMoney = 0
                        for iData in NowInvestList:
                            NowInvestMoney += iData['InvestMoney']

                        InvestMoney = RemainInvestMoney + NowInvestMoney


                        print(GetStockName(stock_code, StockDataList), "(",stock_code, ") ", str(date), " " ,i, " >>>>>>>>>>>>>>>>> Îß§Ïàò! ,Îß§ÏàòÍ∏àÏï°:", round(RealInvestMoney,2) ,  " Îß§ÏàòÍ∞Ä:",NowClosePrice)



    
    NowInvestMoney = 0

    for iData in NowInvestList:
        NowInvestMoney += iData['InvestMoney']



    
    InvestMoney = RemainInvestMoney + NowInvestMoney

    if TopCnt - len(NowInvestList) + 1 > 0:
        InvestMoneyCell = (RemainInvestMoney / (TopCnt - len(NowInvestList) +1 )) * (1.0 - fee)


    InvestCoinListStr = ""
    print("\n\n------------------------------------")
    for iData in NowInvestList:
        InvestCoinListStr += GetStockName(iData['stock_code'], StockDataList)  + " "
    print("------------------------------------")

    print(">>>>>>>>>>>>", InvestCoinListStr, "---> Ìà¨ÏûêÍ∞úÏàò : ", len(NowInvestList))
    #pprint.pprint(NowInvestList)
    print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--))", str(date), " ÏûîÍ≥†:",str(InvestMoney) , "=" , str(RemainInvestMoney) , "+" , str(NowInvestMoney), "\n\n" )
    

    TotalMoneyList.append(InvestMoney)

    #####################################################
    #####################################################
    #####################################################
    #'''
    
   


#Í≤∞Í≥º Ï†ïÎ¶¨ Î∞è Îç∞Ïù¥ÌÑ∞ ÎßåÎì§Í∏∞!!
if len(TotalMoneyList) > 0:

    print("TotalMoneyList -> ", len(TotalMoneyList))


    resultData = dict()

    # Create the result DataFrame with matching shapes
    result_df = pd.DataFrame({"Total_Money": TotalMoneyList}, index=combined_df.index.unique())

    result_df['Ror'] = np.nan_to_num(result_df['Total_Money'].pct_change()) + 1
    result_df['Cum_Ror'] = result_df['Ror'].cumprod()
    result_df['Highwatermark'] = result_df['Cum_Ror'].cummax()
    result_df['Drawdown'] = (result_df['Cum_Ror'] / result_df['Highwatermark']) - 1
    result_df['MaxDrawdown'] = result_df['Drawdown'].cummin()

    print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
    pprint.pprint(result_df)
    print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")

    resultData['DateStr'] = str(FirstDateStr) + " ~ " + str(result_df.iloc[-1].name)

    resultData['OriMoney'] = FirstInvestMoney
    resultData['FinalMoney'] = result_df['Total_Money'].iloc[-1]
    resultData['RevenueRate'] = ((result_df['Cum_Ror'].iloc[-1] -1.0)* 100.0)

    resultData['MDD'] = result_df['MaxDrawdown'].min() * 100.0

    resultData['TryCnt'] = TryCnt
    resultData['SuccesCnt'] = SuccesCnt
    resultData['FailCnt'] = FailCnt

    
    ResultList.append(resultData)

    result_df.index = pd.to_datetime(result_df.index)
    
    # Create a figure with subplots for the two charts
    fig, axs = plt.subplots(2, 1, figsize=(10, 10))

    # Plot the return chart
    axs[0].plot(result_df['Cum_Ror'] * 100, label='Strategy')
    axs[0].set_ylabel('Cumulative Return (%)')
    axs[0].set_title('Return Comparison Chart')
    axs[0].legend()

    # Plot the MDD and DD chart on the same graph
    axs[1].plot(result_df.index, result_df['MaxDrawdown'] * 100, label='MDD')
    axs[1].plot(result_df.index, result_df['Drawdown'] * 100, label='Drawdown')
    axs[1].set_ylabel('Drawdown (%)')
    axs[1].set_title('Drawdown Comparison Chart')
    axs[1].legend()
    

    # Show the plot
    plt.tight_layout()
    plt.show()
        
    
    


    for idx, row in result_df.iterrows():
        print(idx, " " , row['Total_Money'], " "  , row['Cum_Ror'])
        



#Îç∞Ïù¥ÌÑ∞Î•º Î≥¥Í∏∞Ï¢ãÍ≤å ÌîÑÎ¶∞Ìä∏ Ìï¥Ï£ºÎäî Î°úÏßÅ!
print("\n\n--------------------")


for result in ResultList:

    print("--->>>",result['DateStr'].replace("00:00:00",""),"<<<---")

    for stock_data in StockDataList:
        print(stock_data['stock_name'] , " (", stock_data['stock_code'],")")
        if stock_data['try'] > 0:
            print("ÏÑ±Í≥µ:", stock_data['success'] , " Ïã§Ìå®:", stock_data['fail']," -> ÏäπÎ•†: ", round(stock_data['success']/stock_data['try'] * 100.0,2) ," %")
            print("Îß§Îß§Îãπ ÌèâÍ∑† ÏàòÏùµÎ•†:", round(stock_data['accRev']/ stock_data['try'],2) )
        print()

    print("---------- Ï¥ù Í≤∞Í≥º ----------")
    print("ÏµúÏ¥à Í∏àÏï°:", format(int(round(result['OriMoney'],0)), ',') , " ÏµúÏ¢Ö Í∏àÏï°:", format(int(round(result['FinalMoney'],0)), ','), " \nÏàòÏùµÎ•†:", round(((round(result['FinalMoney'],2) - round(result['OriMoney'],2) ) / round(result['OriMoney'],2) ) * 100,2) ,"% MDD:",  round(result['MDD'],2),"%")
    if result['TryCnt'] > 0:
        print("ÏÑ±Í≥µ:", result['SuccesCnt'] , " Ïã§Ìå®:", result['FailCnt']," -> ÏäπÎ•†: ", round(result['SuccesCnt']/result['TryCnt'] * 100.0,2) ," %")

    print("------------------------------")
    print("####################################")
