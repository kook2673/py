#-*-coding:utf-8 -*-
'''

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Ìï¥Îãπ Ïª®ÌÖêÏ∏†Îäî Ï†úÍ∞Ä ÏßÅÏ†ë Ìà¨Ïûê ÌïòÍ∏∞ ÏúÑÌï¥ Ïù¥ Ï†ÑÎûµÏùÑ Ï∂îÍ∞Ä Í∞úÏÑ†Ìï¥ÏÑú Îçî Ï¢ãÏùÄ ÏÑ±Í≥ºÎ•º Î≥¥Ïó¨Ï£ºÎäî Í∞úÏù∏ Ï†ÑÎûµÏù¥ Ï°¥Ïû¨Ìï©ÎãàÎã§. 

Í≤åÎßåÏïÑ Ï∂îÍ∞Ä Í∞úÏÑ† Í∞úÏù∏ Ï†ÑÎûµÎì§..
https://blog.naver.com/zacra/223196497504

Í¥ÄÏã¨ ÏûàÏúºÏã† Î∂ÑÏùÄ ÏúÑ Ìè¨Ïä§ÌåÖÏùÑ Ï∞∏Í≥†ÌïòÏÑ∏Ïöî!

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


Í¥ÄÎ†® Ìè¨Ïä§ÌåÖ
https://blog.naver.com/zacra/223473233858
ÏúÑ Ìè¨Ïä§ÌåÖÏùÑ Íº≠ Ï∞∏Í≥†ÌïòÏÑ∏Ïöî!!!

üìå Í≤åÎßåÏïÑÏùò Î™®Îì† ÏΩîÎìúÎäî ÌäπÏ†ï Ï¢ÖÎ™© Ï∂îÏ≤úÏù¥ÎÇò Ìà¨Ïûê Í∂åÏú†Î•º ÏúÑÌïú Í≤ÉÏù¥ ÏïÑÎãôÎãàÎã§.  
Ï†úÏûëÏûêÏùò Í∞úÏù∏Ï†ÅÏù∏ Í≤¨Ìï¥Î•º Î∞îÌÉïÏúºÎ°ú Íµ¨ÏÑ±Îêú ÍµêÏú°Ïö© ÏòàÏãú ÏΩîÎìúÏù¥Î©∞, ÏàòÏùµÏùÑ Î≥¥Ïû•ÌïòÏßÄ ÏïäÏäµÎãàÎã§
Ïã§Ï†ú Ìà¨Ïûê ÌåêÎã® Î∞è Ïã§ÌñâÏùÄ Ï†ÑÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©Ïûê Î≥∏Ïù∏Ïùò Ï±ÖÏûÑÏûÖÎãàÎã§.

Ï£ºÏãù/ÏΩîÏù∏ ÌååÏù¥Ïç¨ Îß§Îß§ FAQ
https://blog.naver.com/zacra/223203988739

FAQÎ°ú Ìï¥Í≤∞ ÏïàÎêòÎäî Í∏∞Ïà†Ï†ÅÏù∏ Î¨∏Ï†úÎäî ÌÅ¥ÎûòÏä§101 Í∞ïÏùòÏùò ÎåìÍ∏ÄÏù¥ÎÇò ÏúÑ Ìè¨Ïä§ÌåÖÏóê ÎåìÍ∏ÄÎ°ú ÏïåÎ†§Ï£ºÏÑ∏Ïöî.
ÌååÏù¥Ïç¨ ÏΩîÎî©Ïóê ÎåÄÌïú ÎãµÎ≥ÄÎßå Í∞ÄÎä•Ìï©ÎãàÎã§. ÌòÑÌñâÎ≤ï ÏÉÅ Ìà¨Ïûê Í¥ÄÎ†® ÏßàÎ¨∏ÏùÄ ÎãµÎ≥Ä Î∂àÍ∞ÄÌïòÎã§Îäî Ï†ê ÏïåÎ†§ÎìúÎ†§Ïöî!

 
'''

import myUpbit   #Ïö∞Î¶¨Í∞Ä ÎßåÎì† Ìï®ÏàòÎì§Ïù¥ Îì§Ïñ¥ÏûàÎäî Î™®Îìà
import time
import pyupbit

import ende_key  #ÏïîÎ≥µÌò∏ÌôîÌÇ§
import my_key    #ÏóÖÎπÑÌä∏ ÏãúÌÅ¨Î¶ø Ïï°ÏÑ∏Ïä§ÌÇ§
import pandas as pd
import pprint
import json

import line_alert





#ÏàòÏùµÍ∏àÍ≥º ÏàòÏùµÎ•†ÏùÑ Î¶¨ÌÑ¥Ìï¥Ï£ºÎäî Ìï®Ïàò (ÏàòÏàòÎ£åÎäî ÏÉùÍ∞ÅÏïàÌï®) myUpbitÏóê ÎÑ£ÏúºÏÖîÏÑú ÏÇ¨Ïö©ÌïòÏÖîÎèÑ Îê®!
def GetRevenueMoneyAndRate(balances,Ticker):
            

    revenue_data = dict()

    revenue_data['revenue_money'] = 0
    revenue_data['revenue_rate'] = 0

    for value in balances:
        try:
            realTicker = value['unit_currency'] + "-" + value['currency']
            if Ticker == realTicker:
                
                nowPrice = pyupbit.get_current_price(realTicker)
                revenue_data['revenue_money'] = (float(nowPrice) - float(value['avg_buy_price'])) * upbit.get_balance(Ticker)
                revenue_data['revenue_rate'] = (float(nowPrice) - float(value['avg_buy_price'])) * 100.0 / float(value['avg_buy_price'])
                time.sleep(0.06)
                break

        except Exception as e:
            print("---:", e)

    return revenue_data





#ÏãúÍ∞Ñ Ï†ïÎ≥¥Î•º ÏùΩÎäîÎã§
time_info = time.gmtime()

day_n = time_info.tm_mday



#Ïò§Îäò Î°úÏßÅÏù¥ ÏßÑÌñâÎêòÏóàÎäîÏßÄ ÎÇ†Ïßú Ï†ÄÏû• Í¥ÄÎ¶¨ ÌïòÎäî ÌååÏùº
DateDateTodayDict = dict()

#ÌååÏùº Í≤ΩÎ°úÏûÖÎãàÎã§.
today_file_path = "/var/autobot/UpbitHaltInvestToday.json"
try:
    #Ïù¥ Î∂ÄÎ∂ÑÏù¥ ÌååÏùºÏùÑ ÏùΩÏñ¥ÏÑú Î¶¨Ïä§Ìä∏Ïóê ÎÑ£Ïñ¥Ï£ºÎäî Î°úÏßÅÏûÖÎãàÎã§. 
    with open(today_file_path, 'r') as json_file:
        DateDateTodayDict = json.load(json_file)

except Exception as e:
    #Ï≤òÏùåÏóêÎäî ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùÑÌÖåÎãàÍπê ÎãπÏó∞Ìûà ÏòàÏô∏Ï≤òÎ¶¨Í∞Ä Îê©ÎãàÎã§!
    print("Init..")
    
    #0ÏúºÎ°ú Ï¥àÍ∏∞Ìôî!!!!!
    DateDateTodayDict['date'] = 0
    #ÌååÏùºÏóê Ï†ÄÏû•
    with open(today_file_path, 'w') as outfile:
        json.dump(DateDateTodayDict, outfile)

############################################################
############################################################
#Ìà¨Ïûê ÎπÑÏ§ë -> 1.0 : 100%  0.5 : 50%   0.1 : 10%
InvestRate = 0.3 #Ìà¨Ïûê ÎπÑÏ§ëÏùÄ ÏûêÍ∏àÏÇ¨Ï†ïÏóê ÎßûÍ≤å ÏàòÏ†ïÌïòÏÑ∏Ïöî!
MaxCoinCnt = 3 #Ìà¨Ïûê ÏΩîÏù∏ Í∞úÏàò!!!


#ÏµúÏÜå Îß§Ïàò Í∏àÏï°
minmunMoney = 10000
############################################################
############################################################

if DateDateTodayDict['date'] != day_n:
    


    print("15Ï¥à Ï†ïÎèÑ ÏâΩÎãàÎã§!")
    time.sleep(15.0) #ÏïàÏ†ÑÏ†ÑÎûµÎì± Îã§Î•∏ Î¥áÍ≥º ÎèåÎ¶¥ Í≤ΩÏö∞.


    #ÏïîÎ≥µÌò∏Ìôî ÌÅ¥ÎûòÏä§ Í∞ùÏ≤¥Î•º ÎØ∏Î¶¨ ÏÉùÏÑ±Ìïú ÌÇ§Î•º Î∞õÏïÑ ÏÉùÏÑ±ÌïúÎã§.
    simpleEnDecrypt = myUpbit.SimpleEnDecrypt(ende_key.ende_key)

    #ÏïîÌò∏ÌôîÎêú Ïï°ÏÑ∏Ïä§ÌÇ§ÏôÄ ÏãúÌÅ¨Î¶øÌÇ§Î•º ÏùΩÏñ¥ Î≥µÌò∏Ìôî ÌïúÎã§.
    Upbit_AccessKey = simpleEnDecrypt.decrypt(my_key.upbit_access)
    Upbit_ScretKey = simpleEnDecrypt.decrypt(my_key.upbit_secret)

    #ÏóÖÎπÑÌä∏ Í∞ùÏ≤¥Î•º ÎßåÎì†Îã§
    upbit = pyupbit.Upbit(Upbit_AccessKey, Upbit_ScretKey)


    #ÎÇ¥Í∞Ä Í∞ÄÏßÑ ÏûîÍ≥† Îç∞Ïù¥ÌÑ∞Î•º Îã§ Í∞ÄÏ†∏Ïò®Îã§.
    balances = upbit.get_balances()

    TotalMoney = myUpbit.GetTotalMoney(balances) #Ï¥ù ÏõêÍ∏à
    TotalRealMoney = myUpbit.GetTotalRealMoney(balances) #Ï¥ù ÌèâÍ∞ÄÍ∏àÏï°

    print("TotalMoney", TotalMoney)
    print("TotalRealMoney", TotalRealMoney)
    
    
    
    ##########################################################################
    InvestTotalMoney = TotalMoney * InvestRate #Ï¥ù Ìà¨ÏûêÏõêÍ∏à+ ÎÇ®ÏùÄ ÏõêÌôî Í∏∞Ï§ÄÏúºÎ°ú Ìà¨Ïûê!!!!
    ##########################################################################

    print("InvestTotalMoney", InvestTotalMoney)

    InvestCoinMoney = InvestTotalMoney / (MaxCoinCnt) #ÏΩîÏù∏Îãπ Ìà¨ÏûêÍ∏à!
    

    #Ìï¥Îãπ Ï†ÑÎûµÏù¥ Îß§Îß§ÌïòÎ©¥ ÏïàÎêòÎäî ÏΩîÏù∏Î¶¨Ïä§Ìä∏.. (Îã§Î•∏Ï†ÑÎûµÏù¥ Ìà¨ÏûêÌïòÎäî ÏΩîÏù∏Ïù¥Í±∞ÎÇò ÏÉÅÌèê ÏòàÏ†ïÏù∏ ÏΩîÏù∏Îì§ÏùÑ Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä!!!)
    OutCoinList = ['KRW-BTC','KRW-ETH']
    
    Tickers = ["KRW-BTC","KRW-ETH","KRW-ADA","KRW-SOL","KRW-DOT","KRW-POL","KRW-XRP","KRW-DOGE","KRW-SHIB","KRW-AVAX","KRW-LINK","KRW-BCH","KRW-APT","KRW-HBAR","KRW-STX","KRW-ATOM","KRW-XLM","KRW-CRO","KRW-ALGO","KRW-SUI","KRW-VET","KRW-AAVE","KRW-TRX"]

    #ÌòπÏãúÎÇò ÏúÑ ÏΩîÏù∏Ï§ë Ï£ºÏùòÍ∞Ä Îú¨ Í≤ÉÏù¥ ÏûàÎã§Î©¥ OutCoinListÏóê Ï∂îÍ∞Ä
    TempTicker = pyupbit.get_tickers("KRW",True) #ÏõêÌôîÎßàÏºìÏùò Î™®Îì† Îç∞Ïù¥ÌÑ∞!
    for coin_ticker in Tickers:
        for coin_data in TempTicker:
            if coin_ticker == coin_data['market']:
                if coin_data['market_event']['warning'] == True:
                    OutCoinList.append(coin_data['market'])
                    
            

    #Ìà¨ÏûêÌïú ÏΩîÏù∏ÏùÑ Ï†ÄÏû•Ìï† Î¶¨Ïä§Ìä∏!!
    AltInvestList = list()

    #ÌååÏùº Í≤ΩÎ°úÏûÖÎãàÎã§.
    invest_file_path = "/var/autobot/UpbitHaltInvestList.json"
    try:
        #Ïù¥ Î∂ÄÎ∂ÑÏù¥ ÌååÏùºÏùÑ ÏùΩÏñ¥ÏÑú Î¶¨Ïä§Ìä∏Ïóê ÎÑ£Ïñ¥Ï£ºÎäî Î°úÏßÅÏûÖÎãàÎã§. 
        with open(invest_file_path, 'r') as json_file:
            AltInvestList = json.load(json_file)

    except Exception as e:
        #Ï≤òÏùåÏóêÎäî ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùÑÌÖåÎãàÍπê ÎãπÏó∞Ìûà ÏòàÏô∏Ï≤òÎ¶¨Í∞Ä Îê©ÎãàÎã§!
        print("Exception by First")



    #ÏΩîÏù∏ÏùÑ ÏñºÎßà Í∏∞Í∞ÑÎèôÏïà Î≥¥Ïú†ÌïòÍ≥† ÏûàÎäîÏßÄÎ•º Í¥ÄÎ¶¨Ìï† ÌååÏùº!
    CoinHasCountDict = dict()

    #ÌååÏùº Í≤ΩÎ°úÏûÖÎãàÎã§.
    CoinHasCount_file_path = "/var/autobot/UpbitHaltHasCoinCount.json"
    try:
        #Ïù¥ Î∂ÄÎ∂ÑÏù¥ ÌååÏùºÏùÑ ÏùΩÏñ¥ÏÑú Î¶¨Ïä§Ìä∏Ïóê ÎÑ£Ïñ¥Ï£ºÎäî Î°úÏßÅÏûÖÎãàÎã§. 
        with open(CoinHasCount_file_path, 'r') as json_file:
            CoinHasCountDict = json.load(json_file)

    except Exception as e:
        #Ï≤òÏùåÏóêÎäî ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùÑÌÖåÎãàÍπê ÎãπÏó∞Ìûà ÏòàÏô∏Ï≤òÎ¶¨Í∞Ä Îê©ÎãàÎã§!
        print("..")



            
    stock_df_list = []

    for ticker in Tickers:

        try:

   
            print("----->", ticker ,"<-----")
            df = pyupbit.get_ohlcv(ticker,interval="day") 

            df['value'] = df['close'] * df['volume']
            
            period = 14

            delta = df["close"].diff()
            up, down = delta.copy(), delta.copy()
            up[up < 0] = 0
            down[down > 0] = 0
            _gain = up.ewm(com=(period - 1), min_periods=period).mean()
            _loss = down.abs().ewm(com=(period - 1), min_periods=period).mean()
            RS = _gain / _loss

            df['RSI'] = pd.Series(100 - (100 / (1 + RS)), name="RSI")

            df['prevRSI'] = df['RSI'].shift(1)
            df['ma5_rsi_before'] = df['RSI'].rolling(5).mean().shift(1)


            df['prevValue'] = df['value'].shift(1)
            df['prevClose'] = df['close'].shift(1)
            df['prevClose2'] = df['close'].shift(2)

            df['prevChange'] = (df['prevClose'] - df['prevClose2']) / df['prevClose2']

            df['value_ma'] = df['value'].rolling(window=10).mean().shift(1)

            df['ma5_before'] = df['close'].rolling(5).mean().shift(1)
            df['ma5_before2'] = df['close'].rolling(5).mean().shift(2)

            df['ma50_before'] = df['close'].rolling(50).mean().shift(1)
            df['ma50_before2'] = df['close'].rolling(50).mean().shift(2)

            df['ma60_before'] = df['close'].rolling(60).mean().shift(1)
            df['ma60_before2'] = df['close'].rolling(60).mean().shift(2)
            

            df['ma120_before'] = df['close'].rolling(120).mean().shift(1)
            df['ma120_before2'] = df['close'].rolling(120).mean().shift(2)


            df['prevCloseW'] = df['close'].shift(7)
            df['prevChangeW'] = (df['prevClose'] - df['prevCloseW']) / df['prevCloseW']
                
            df.dropna(inplace=True) #Îç∞Ïù¥ÌÑ∞ ÏóÜÎäîÍ±¥ ÎÇ†Î¶∞Îã§!

        

            data_dict = {ticker: df}
            stock_df_list.append(data_dict)

            time.sleep(0.2)

        except Exception as e:
            print("Exception ", e)


    # Combine the OHLCV data into a single DataFrame
    combined_df = pd.concat([list(data_dict.values())[0].assign(ticker=ticker) for data_dict in stock_df_list for ticker in data_dict])

    # Sort the combined DataFrame by date
    combined_df.sort_index(inplace=True)


    pprint.pprint(combined_df)
    print(" len(combined_df) ", len(combined_df))


    combined_df.index = pd.DatetimeIndex(combined_df.index).strftime('%Y-%m-%d %H:%M:%S')

    #Í∞ÄÏû• ÏµúÍ∑º ÎÇ†ÏßúÎ•º Íµ¨Ìï¥ÏÑú Í∞ÄÏ†∏Ïò¥ 
    date = combined_df.iloc[-1].name


    btc_data = combined_df[(combined_df.index == date) & (combined_df['ticker'] == 'KRW-BTC')]

    pick_coins_top = combined_df.loc[combined_df.index == date].groupby('ticker')['value_ma'].max().nlargest(10)


    ###################################################
    #--> A) Í±∞ÎûòÎåÄÍ∏à TOP Í≥º ÏàòÏùµÎ•† TOP ÍµêÏßëÌï© Ï°∞Ìï© Î≤ÑÏ†Ñ ÏãúÏûë<--
    #pick_coins_top_change = combined_df.loc[combined_df.index == date].groupby('ticker')['prevChangeW'].max().nlargest(MaxCoinCnt)
    #--> A) Í±∞ÎûòÎåÄÍ∏à TOP Í≥º ÏàòÏùµÎ•† TOP ÍµêÏßëÌï© Ï°∞Ìï© Î≤ÑÏ†Ñ ÎÅù <--
    ###################################################
    
    ###################################################
    #--> B) Í±∞ÎûòÎåÄÍ∏à TOP Ï§ëÏóêÏÑú ÏàòÏùµÎ•† ÎÜíÏùÄÍ±∞ ÎΩëÎäî Î≤ÑÏ†Ñ ÏãúÏûë!<--
    #'''
    dic_coin_change = dict()

    for ticker in pick_coins_top.index:
        try:
            
                
            if ticker in OutCoinList: 
                continue

            coin_data = combined_df[(combined_df.index == date) & (combined_df['ticker'] == ticker)]
            if len(coin_data) == 1:
                    
                dic_coin_change[ticker] = coin_data['prevChangeW'].values[0]

        except Exception as e:
            print("---:",e)

    dic_sorted_coin_change = sorted(dic_coin_change.items(), key = lambda x : x[1], reverse= True)

    pick_coins_top_change = list()
    cnt = 0
    for coin_data in dic_sorted_coin_change:
        cnt += 1
        if cnt <= MaxCoinCnt:
            pick_coins_top_change.append(coin_data[0])
        else:
            break
    #'''
    #--> B) Í±∞ÎûòÎåÄÍ∏à TOP Ï§ëÏóêÏÑú ÏàòÏùµÎ•† ÎÜíÏùÄÍ±∞ ÎΩëÎäî Î≤ÑÏ†Ñ ÎÅù <--

    TodayRemoveList = list()

    items_to_remove = list()

    #Ìà¨ÏûêÏ§ë ÏΩîÏù∏!
    for coin_ticker in AltInvestList:
        


        #ÏûîÍ≥†Í∞Ä ÏûàÎäî Í≤ΩÏö∞.
        if myUpbit.IsHasCoin(balances,coin_ticker) == True: 
            print("")

            #ÏàòÏùµÍ∏àÍ≥º ÏàòÏùµÎ•†ÏùÑ Íµ¨ÌïúÎã§!
            revenue_data = GetRevenueMoneyAndRate(balances,coin_ticker)

            msg = coin_ticker + "ÌòÑÏû¨ ÏàòÏùµÎ•† : ÏïΩ " + str(round(revenue_data['revenue_rate'],2)) + "% ÏàòÏùµÍ∏à : ÏïΩ" + str(format(round(revenue_data['revenue_money']), ',')) + "Ïõê"
            print(msg)
            line_alert.SendMessage(msg)
            
            #ÌòπÏãú Í∞íÏù¥ ÏóÜÎã§Î©¥ 0ÏúºÎ°ú ÎÑ£Ïñ¥Ï§ÄÎã§!
            if CoinHasCountDict.get(coin_ticker) == None:

                CoinHasCountDict[coin_ticker] = 0
                #ÌååÏùºÏóê Ï†ÄÏû•
                with open(CoinHasCount_file_path, 'w') as outfile:
                    json.dump(CoinHasCountDict, outfile)
                    
            
            #Î≥¥Ïú† ÎÇ†ÏûêÎ•º Ï¶ùÍ∞ÄÏãúÏºúÏ§ÄÎã§!!!
            CoinHasCountDict[coin_ticker] += 1
            #ÌååÏùºÏóê Ï†ÄÏû•
            with open(CoinHasCount_file_path, 'w') as outfile:
                json.dump(CoinHasCountDict, outfile)
                
                

            stock_data = combined_df[(combined_df.index == date) & (combined_df['ticker'] == coin_ticker)]


            if len(stock_data) == 1 and len(btc_data) == 1:

                IsSell = False


                #Îß§ÎèÑ Ï°∞Í±¥!!!! 7Ïùº Ïù¥ÏÉÅ Î≥¥Ïú†Ï§ëÏù¥ÎùºÎ©¥ Î¶¨Î∞∏Îü∞Ïã± ÎåÄÏÉÅÏù¥ Îê† Ïàò ÏûàÎã§!
                if CoinHasCountDict[coin_ticker] >= 7:
                    
                    IsTopIn = False
                    ###################################################
                    #--> A) Í±∞ÎûòÎåÄÍ∏à TOP Í≥º ÏàòÏùµÎ•† TOP ÍµêÏßëÌï© Ï°∞Ìï© Î≤ÑÏ†Ñ ÏãúÏûë<--
                    '''
                    for ticker_t in pick_coins_top.index:
                        
                        if ticker_t == coin_ticker:
                            for ticker_t2 in pick_coins_top_change.index:
                            
                                if ticker_t2 == ticker_t:
                                    coin_top_data = combined_df[(combined_df.index == date) & (combined_df['ticker'] == ticker_t2)]
                                    if len(coin_top_data) == 1:
                                        IsTopIn = True
                                        break
                    '''
                    #--> A) Í±∞ÎûòÎåÄÍ∏à TOP Í≥º ÏàòÏùµÎ•† TOP ÍµêÏßëÌï© Ï°∞Ìï© Î≤ÑÏ†Ñ ÎÅù <--
                    ###################################################
                    
                    ###################################################
                    #--> B) Í±∞ÎûòÎåÄÍ∏à TOP Ï§ëÏóêÏÑú ÏàòÏùµÎ•† ÎÜíÏùÄÍ±∞ ÎΩëÎäî Î≤ÑÏ†Ñ ÏãúÏûë!<--
                    #'''
                    if coin_ticker in pick_coins_top_change:
                        IsTopIn = True
                    #'''
                    #--> B) Í±∞ÎûòÎåÄÍ∏à TOP Ï§ëÏóêÏÑú ÏàòÏùµÎ•† ÎÜíÏùÄÍ±∞ ÎΩëÎäî Î≤ÑÏ†Ñ ÎÅù <--
                    ###################################################
                    if IsTopIn == False:
                        IsSell = True
                        
                    

                if btc_data['ma120_before'].values[0]  >  btc_data['prevClose'].values[0]:
                    IsSell = True
                    
                if ((stock_data['ma50_before2'].values[0]  >  stock_data['ma50_before'].values[0] and stock_data['ma50_before'].values[0]  >  stock_data['prevClose'].values[0]) or (stock_data['ma5_before2'].values[0]  >  stock_data['ma5_before'].values[0] and stock_data['ma5_before'].values[0]  >  stock_data['prevClose'].values[0])) :
    
                    IsSell = True


                if IsSell == True:

                    TodayRemoveList.append(coin_ticker)
                    
                    
                    AllAmt = upbit.get_balance(coin_ticker) #ÌòÑÏû¨ ÏàòÎüâ

                    balances = myUpbit.SellCoinMarket(upbit,coin_ticker,AllAmt)
                                    
                    msg = coin_ticker + " ÏóÖÎπÑÌä∏ Ìï†Ìä∏ Ìà¨Ïûê Î¥á : Ï°∞Í±¥ÏùÑ Î∂àÎßåÏ°±ÌïòÏó¨ Î™®Îëê Îß§ÎèÑÏ≤òÎ¶¨ ÌñàÏñ¥Ïöî!!"
                    print(msg)
                    line_alert.SendMessage(msg)

                    items_to_remove.append(coin_ticker)



                    #Î≥¥Ïú† ÎÇ†ÏûêÎ•º Ï¥àÍ∏∞Ìôî
                    CoinHasCountDict[coin_ticker] = 0
                    #ÌååÏùºÏóê Ï†ÄÏû•
                    with open(CoinHasCount_file_path, 'w') as outfile:
                        json.dump(CoinHasCountDict, outfile)
                
        #ÏûîÍ≥†Í∞Ä ÏóÜÎäî Í≤ΩÏö∞
        else:
            #Ìà¨ÏûêÏ§ëÏúºÎ°ú ÎÇòÏôÄ ÏûàÎäîÎç∞ ÏûîÍ≥†Í∞Ä ÏóÜÎã§? ÏûàÏùÑ Ïàò ÏóÜÏßÄÎßå ÏàòÎèôÏúºÎ°ú Îß§ÎèÑÌïú Í≤ΩÏö∞..
            items_to_remove.append(coin_ticker)


    #Î¶¨Ïä§Ìä∏ÏóêÏÑú Ï†úÍ±∞
    for item in items_to_remove:
        AltInvestList.remove(item)


    #ÌååÏùºÏóê Ï†ÄÏû•
    with open(invest_file_path, 'w') as outfile:
        json.dump(AltInvestList, outfile)


    ###################################################
    #--> A) Í±∞ÎûòÎåÄÍ∏à TOP Í≥º ÏàòÏùµÎ•† TOP ÍµêÏßëÌï© Ï°∞Ìï© Î≤ÑÏ†Ñ ÏãúÏûë<--
    #for ticker in pick_coins_top.index:
    #--> A) Í±∞ÎûòÎåÄÍ∏à TOP Í≥º ÏàòÏùµÎ•† TOP ÍµêÏßëÌï© Ï°∞Ìï© Î≤ÑÏ†Ñ ÎÅù <--
    ###################################################

    ###################################################
    #--> B) Í±∞ÎûòÎåÄÍ∏à TOP Ï§ëÏóêÏÑú ÏàòÏùµÎ•† ÎÜíÏùÄÍ±∞ ÎΩëÎäî Î≤ÑÏ†Ñ ÏãúÏûë!<--
    for ticker in pick_coins_top_change:
    #--> B) Í±∞ÎûòÎåÄÍ∏à TOP Ï§ëÏóêÏÑú ÏàòÏùµÎ•† ÎÜíÏùÄÍ±∞ ÎΩëÎäî Î≤ÑÏ†Ñ ÎÅù <--
    ###################################################
    

        if ticker in OutCoinList: #Ï†úÏô∏Ìï† ÏΩîÏù∏!
            continue
        
        
        CheckMsg = ticker
        
        CheckMsg += " Í±∞ÎûòÎåÄÍ∏à & Îì±ÎùΩÎ•† ÏÉÅÏúÑ Ï°∞Í±¥ ÎßåÏ°±! "
        
        IsAlReadyInvest = False
        for coin_ticker in AltInvestList:
            if ticker == coin_ticker: 
                IsAlReadyInvest = True
                break


        ###################################################
        #--> A) Í±∞ÎûòÎåÄÍ∏à TOP Í≥º ÏàòÏùµÎ•† TOP ÍµêÏßëÌï© Ï°∞Ìï© Î≤ÑÏ†Ñ ÏãúÏûë<--
        '''
        IsTOPInChange = False
        for ticker_t in pick_coins_top_change.index:

            if ticker_t == ticker:
                coin_top_data = combined_df[(combined_df.index == date) & (combined_df['ticker'] == ticker_t)]
                if len(coin_top_data) == 1:
                    IsTOPInChange = True
                    break
        '''
        #--> A) Í±∞ÎûòÎåÄÍ∏à TOP Í≥º ÏàòÏùµÎ•† TOP ÍµêÏßëÌï© Ï°∞Ìï© Î≤ÑÏ†Ñ ÎÅù <--
        ################################################### 

            
        ###################################################
        #--> B) Í±∞ÎûòÎåÄÍ∏à TOP Ï§ëÏóêÏÑú ÏàòÏùµÎ•† ÎÜíÏùÄÍ±∞ ÎΩëÎäî Î≤ÑÏ†Ñ ÏãúÏûë!<--
        IsTOPInChange = True
        #--> B) Í±∞ÎûòÎåÄÍ∏à TOP Ï§ëÏóêÏÑú ÏàòÏùµÎ•† ÎÜíÏùÄÍ±∞ ÎΩëÎäî Î≤ÑÏ†Ñ ÎÅù <--
        ###################################################
        
        


        stock_data = combined_df[(combined_df.index == date) & (combined_df['ticker'] == ticker)]

       
        #Ïù¥ÎØ∏ Ìà¨ÏûêÏ§ëÏù¥ ÏïÑÎãàÎ©¥ÏÑú Ï°∞Í±¥ ÎßåÏ°±Ìïú ÏΩîÏù∏Îì§
        if len(stock_data) == 1 and IsAlReadyInvest == False and IsTOPInChange == True: 



            IsBuyGo = False

            #Îß§Ïàò Ï°∞Í±¥ Ï≤¥ÌÅ¨!

            if (btc_data['ma60_before2'].values[0]  <  btc_data['ma60_before'].values[0] or btc_data['ma60_before'].values[0]  <  btc_data['prevClose'].values[0])  and (btc_data['ma120_before2'].values[0]  <  btc_data['ma120_before'].values[0] or btc_data['ma120_before'].values[0]  <  btc_data['prevClose'].values[0]) and stock_data['prevChangeW'].values[0] > 0:

                CheckMsg += " ÎπÑÌä∏ÏΩîÏù∏ Ï°∞Í±¥ ÎßåÏ°±! "
                if (stock_data['ma50_before2'].values[0]  <=  stock_data['ma50_before'].values[0] and stock_data['ma50_before'].values[0]  <=  stock_data['prevClose'].values[0] and stock_data['ma5_before2'].values[0]  <=  stock_data['ma5_before'].values[0] and stock_data['ma5_before'].values[0]  <=  stock_data['prevClose'].values[0]) :
                    
                    CheckMsg += " Ï∂îÍ∞Ä Ï°∞Í±¥ ÎßåÏ°±! Î™®Îì† ÏΩîÏù∏Ïù¥ Ìà¨ÏûêÎêú Í≤ÉÏù¥ ÏïÑÎãàÎùºÎ©¥ Îß§Ïàò!! "
                    IsBuyGo = True


            #Ï°∞Í±¥ ÎßåÏ°±ÌïòÍ≥† Î™®Îì† ÏΩîÏù∏Ïù¥ Ìà¨ÏûêÎêú Í≤ÉÏù¥ ÏïÑÎãàÎùºÎ©¥ 
            if IsBuyGo == True and len(AltInvestList) < int(MaxCoinCnt) and ticker not in TodayRemoveList:


                if myUpbit.IsHasCoin(balances,ticker) == False: 

                    Rate = 1.0
                    BuyMoney = InvestCoinMoney * Rate

                    #Ìà¨ÏûêÍ∏à Ï†úÌïú!
                    if BuyMoney > stock_data['value_ma'].values[0] / 2000:
                        BuyMoney = stock_data['value_ma'].values[0] / 2000

                    if BuyMoney < minmunMoney:
                        BuyMoney = minmunMoney



                    #ÏõêÌôî ÏûîÍ≥†Î•º Í∞ÄÏ†∏Ïò®Îã§
                    won = float(upbit.get_balance("KRW"))
                    print("# Remain Won :", won)
                    time.sleep(0.04)
                    
                    #
                    if BuyMoney > won:
                        BuyMoney = won * 0.99 #Ïä¨Î¶¨ÌîºÏßÄ Î∞è ÏàòÏàòÎ£å Í≥†Î†§

                    balances = myUpbit.BuyCoinMarket(upbit,ticker,BuyMoney)

                    msg = ticker + " ÏóÖÎπÑÌä∏ Ìï†Ìä∏ Ìà¨Ïûê Î¥á : Ï°∞Í±¥ ÎßåÏ°± ÌïòÏó¨ Îß§Ïàò!!"
                    print(msg)
                    line_alert.SendMessage(msg)



                    
                    AltInvestList.append(ticker)

                    #ÌååÏùºÏóê Ï†ÄÏû•
                    with open(invest_file_path, 'w') as outfile:
                        json.dump(AltInvestList, outfile)



                    CoinHasCountDict[ticker] = 0
                    #ÌååÏùºÏóê Ï†ÄÏû•
                    with open(CoinHasCount_file_path, 'w') as outfile:
                        json.dump(CoinHasCountDict, outfile)
                        
                        

        print(CheckMsg)
        line_alert.SendMessage(CheckMsg)
            
            
    #Ï≤¥ÌÅ¨ ÎÇ†ÏßúÍ∞Ä Îã§Î•¥Îã§Î©¥ Îß® Ï≤òÏùåÏù¥Í±∞ÎÇò ÎÇ†Ïù¥ Î∞îÎÄêÍ≤ÉÏù¥Îã§!!
    DateDateTodayDict['date'] = day_n
    #ÌååÏùºÏóê Ï†ÄÏû•
    with open(today_file_path, 'w') as outfile:
        json.dump(DateDateTodayDict, outfile)


    msg = " ÏóÖÎπÑÌä∏ Ìï†Ìä∏ Ìà¨Ïûê Î¥á : Ïò§Îäò Î°úÏßÅ ÎÅù!!"
    print(msg)
    line_alert.SendMessage(msg)

else:
    print("Ïò§ÎäòÏùÄ Ïù¥ÎØ∏ ÏóÖÎπÑÌä∏ Ìï†Ìä∏ Ìà¨Ïûê Î¥á Î°úÏßÅÏù¥ ÎÅùÎÇ¨Ïñ¥Ïöî!!")




