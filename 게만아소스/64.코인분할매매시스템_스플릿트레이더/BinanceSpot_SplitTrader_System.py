'''

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Î∞îÏù¥ÎÇ∏Ïä§ ccxt Î≤ÑÏ†Ñ
pip3 install --upgrade ccxt==4.2.19
Ïù¥Î†áÍ≤å Î≤ÑÏ†ÑÏùÑ ÎßûÏ∂∞Ï£ºÏÑ∏Ïöî!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


Í¥ÄÎ†® Ìè¨Ïä§ÌåÖ
https://blog.naver.com/zacra/223744333599
https://blog.naver.com/zacra/223763707914

ÏµúÏ¢Ö Í∞úÏÑ†
https://blog.naver.com/zacra/223773295093


üìå Í≤åÎßåÏïÑÏùò Î™®Îì† ÏΩîÎìúÎäî ÌäπÏ†ï Ï¢ÖÎ™© Ï∂îÏ≤úÏù¥ÎÇò Ìà¨Ïûê Í∂åÏú†Î•º ÏúÑÌïú Í≤ÉÏù¥ ÏïÑÎãôÎãàÎã§.  
Ï†úÏûëÏûêÏùò Í∞úÏù∏Ï†ÅÏù∏ Í≤¨Ìï¥Î•º Î∞îÌÉïÏúºÎ°ú Íµ¨ÏÑ±Îêú ÍµêÏú°Ïö© ÏòàÏãú ÏΩîÎìúÏù¥Î©∞, ÏàòÏùµÏùÑ Î≥¥Ïû•ÌïòÏßÄ ÏïäÏäµÎãàÎã§
Ïã§Ï†ú Ìà¨Ïûê ÌåêÎã® Î∞è Ïã§ÌñâÏùÄ Ï†ÑÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©Ïûê Î≥∏Ïù∏Ïùò Ï±ÖÏûÑÏûÖÎãàÎã§.

Ï£ºÏãù/ÏΩîÏù∏ ÌååÏù¥Ïç¨ Îß§Îß§ FAQ
https://blog.naver.com/zacra/223203988739

FAQÎ°ú Ìï¥Í≤∞ ÏïàÎêòÎäî Í∏∞Ïà†Ï†ÅÏù∏ Î¨∏Ï†úÎäî ÌÅ¥ÎûòÏä§101 Í∞ïÏùòÏùò ÎåìÍ∏ÄÏù¥ÎÇò ÏúÑ Ìè¨Ïä§ÌåÖÏóê ÎåìÍ∏ÄÎ°ú ÏïåÎ†§Ï£ºÏÑ∏Ïöî.
ÌååÏù¥Ïç¨ ÏΩîÎî©Ïóê ÎåÄÌïú ÎãµÎ≥ÄÎßå Í∞ÄÎä•Ìï©ÎãàÎã§. ÌòÑÌñâÎ≤ï ÏÉÅ Ìà¨Ïûê Í¥ÄÎ†® ÏßàÎ¨∏ÏùÄ ÎãµÎ≥Ä Î∂àÍ∞ÄÌïòÎã§Îäî Ï†ê ÏïåÎ†§ÎìúÎ†§Ïöî!


'''
# -*- coding: utf-8 -*-
import ccxt
import myBinance
import ende_key  #ÏïîÎ≥µÌò∏ÌôîÌÇ§
import my_key   
import time
import random
import json
import line_alert
import fcntl

#from tendo import singleton 
#me = singleton.SingleInstance()



DIST = "Î∞îÏù¥ÎÇ∏Ïä§ÌòÑÎ¨º"



#ÏïîÎ≥µÌò∏Ìôî ÌÅ¥ÎûòÏä§ Í∞ùÏ≤¥Î•º ÎØ∏Î¶¨ ÏÉùÏÑ±Ìïú ÌÇ§Î•º Î∞õÏïÑ ÏÉùÏÑ±ÌïúÎã§.
simpleEnDecrypt = myBinance.SimpleEnDecrypt(ende_key.ende_key)


#ÏïîÌò∏ÌôîÎêú Ïï°ÏÑ∏Ïä§ÌÇ§ÏôÄ ÏãúÌÅ¨Î¶øÌÇ§Î•º ÏùΩÏñ¥ Î≥µÌò∏Ìôî ÌïúÎã§.
Binance_AccessKey = simpleEnDecrypt.decrypt(my_key.binance_access)
Binance_ScretKey = simpleEnDecrypt.decrypt(my_key.binance_secret)


# binance Í∞ùÏ≤¥ ÏÉùÏÑ±
binanceX = ccxt.binance(config={
    'apiKey': Binance_AccessKey, 
    'secret': Binance_ScretKey,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'spot'
    }
})




#ÏµúÏÜå Í∏àÏï° 
minimumMoney = 5.0 #5USDT


auto_order_file_path = "/var/autobot/BinanceSpot_SplitTrader_AutoOrderList.json"
time.sleep(random.random()*0.1)

#ÏûêÎèô Ï£ºÎ¨∏ Î¶¨Ïä§Ìä∏ ÏùΩÍ∏∞!
AutoOrderList = list()
try:
    with open(auto_order_file_path, 'r') as json_file:
        fcntl.flock(json_file, fcntl.LOCK_EX)  # ÌååÏùº ÎùΩ ÏÑ§Ï†ï
        AutoOrderList = json.load(json_file)
        fcntl.flock(json_file, fcntl.LOCK_UN)  # ÌååÏùº ÎùΩ Ìï¥Ï†ú
except Exception as e:
    print("Exception by First")


items_to_remove = list()


#Ï†ÄÏû•Îêú Î∂ÑÌï† Îß§Îß§ Îç∞Ïù¥ÌÑ∞Î•º ÏàúÌöåÌïúÎã§ 
for AutoSplitData in AutoOrderList:
    
    #Îß§ÎèÑÎ•º Î®ºÏ†Ä ÌïúÎã§!!
    if AutoSplitData['OrderType'] == "Sell":
            
        #ÏãúÍ∞Ñ Ïπ¥Ïö¥Ìä∏Î•º Ï¶ùÍ∞ÄÏãúÌÇ®Îã§.
        AutoSplitData['TimeCnt'] += 1
        #ÏãúÍ∞Ñ Ïπ¥Ïö¥Ìä∏Í∞Ä ÏãúÍ∞Ñ ÌÖÄÎ≥¥Îã§ ÌÅ¨Í±∞ÎÇò Í∞ôÏúºÎ©¥ Ï£ºÎ¨∏ÏùÑ Ï≤òÎ¶¨ÌïúÎã§.
        if AutoSplitData['TimeCnt'] >= AutoSplitData['TimeTerm']:
            AutoSplitData['TimeCnt'] = 0
            AutoSplitData['OrderCnt'] += 1

            IsLastOrder = False
            if AutoSplitData['OrderCnt'] >= AutoSplitData['SplitCount']:
                IsLastOrder = True
                items_to_remove.append(AutoSplitData)
                
            nowPrice = myBinance.GetCoinNowPrice(binanceX, AutoSplitData['Ticker'])

            balance = binanceX.fetch_balance(params={"type": "spot"})
            time.sleep(0.1)

        

            SellVolume = AutoSplitData['SplitSellVolume']
            AllVolume = float(balance[AutoSplitData['Ticker'].split('/')[0]]['total'])

            if AllVolume * nowPrice < minimumMoney:

                msg = DIST + " " + AutoSplitData['Ticker'] + " ÌòÑÏû¨ Î≥¥Ïú† ÏàòÎüâÏù¥ ÏµúÏÜå Ï£ºÎ¨∏ Í∏àÏï°Î≥¥Îã§ Ï†ÅÏñ¥ÏÑú Îß§ÎèÑ Ï£ºÎ¨∏ÏùÑ Ï∑®ÏÜåÌï©ÎãàÎã§."
                print(msg)
                line_alert.SendMessage(msg)

                if IsLastOrder == False:
                    items_to_remove.append(AutoSplitData)

            else:
                #ÎßàÏßÄÎßâ Ï£ºÎ¨∏Ïù¥ÎùºÎ©¥ Îß§ÎèÑÌñàÏùÑ Îïå ÎÇ®ÏùÄ Í∏àÏï°Ïù¥ 5 USDT Ïù¥ÌïòÎùºÎ©¥ ÏûêÌà¨Î¶¨Î°ú ÌåêÎã® Î™®Îëê Îß§ÎèÑÌïúÎã§.   
                if IsLastOrder == True:

                    if 'LastSellAll' in AutoSplitData and AutoSplitData['LastSellAll'] == True:
                        SellVolume = AllVolume
                    else:
                        #ÎÇ®ÏùÄ ÏàòÎüâÍ≥º Îß§ÎèÑ ÏàòÎüâÏùò Ï∞®Ïù¥Î•º Íµ¨ÌïúÎã§.
                        GapVolume = abs(AllVolume - SellVolume)
                    
                        #ÎßàÏßÄÎßâ Ï£ºÎ¨∏Ïù¥ÎùºÎ©¥ Îß§ÎèÑÌñàÏùÑ Îïå ÎÇ®ÏùÄ Í∏àÏï°Ïù¥ 5 USDT Ïù¥ÌïòÎùºÎ©¥ ÏûêÌà¨Î¶¨Î°ú ÌåêÎã® Î™®Îëê Îß§ÎèÑÌïúÎã§.   
                        if GapVolume * nowPrice <= minimumMoney:
                            SellVolume = AllVolume



                #Îß§ÎèÑ!
                data = binanceX.create_order(AutoSplitData['Ticker'], 'market', 'sell', AutoSplitData['SplitSellVolume'])
                print(data)
                time.sleep(0.2)
                


                msg = DIST + " " + AutoSplitData['Ticker'] + " " + str(AutoSplitData['OrderVolume']) + "Í∞ú (" + str(nowPrice*AutoSplitData['OrderVolume']) +")ÏõêÏñ¥Ïπò " + str(AutoSplitData['SplitCount']) + "Î∂ÑÌï† Îß§ÎèÑ Ï§ëÏûÖÎãàÎã§.\n"
                msg += str(AutoSplitData['OrderCnt']) + "Î≤àÏß∏ Îß§ÎèÑ ÏàòÎüâ: " + str(AutoSplitData['SplitSellVolume']) + "Í∞ú (" + str(nowPrice*AutoSplitData['SplitSellVolume']) +")ÏõêÏñ¥Ïπò Îß§ÎèÑ Ï£ºÎ¨∏ ÏôÑÎ£å!"

                if IsLastOrder == True:
                    msg += " ÎßàÏßÄÎßâ Îß§ÎèÑÍπåÏßÄ Î™®Îëê ÏôÑÎ£å!"
                    
                print(msg)
                line_alert.SendMessage(msg)




#Ï†ÄÏû•Îêú Î∂ÑÌï† Îß§Îß§ Îç∞Ïù¥ÌÑ∞Î•º ÏàúÌöåÌïúÎã§ 
for AutoSplitData in AutoOrderList:
    
    #Îß§ÏàòÎ•º ÌõÑÏóê ÌïúÎã§!
    if AutoSplitData['OrderType'] == "Buy":
            
        #ÏãúÍ∞Ñ Ïπ¥Ïö¥Ìä∏Î•º Ï¶ùÍ∞ÄÏãúÌÇ®Îã§.
        AutoSplitData['TimeCnt'] += 1
        #ÏãúÍ∞Ñ Ïπ¥Ïö¥Ìä∏Í∞Ä ÏãúÍ∞Ñ ÌÖÄÎ≥¥Îã§ ÌÅ¨Í±∞ÎÇò Í∞ôÏúºÎ©¥ Ï£ºÎ¨∏ÏùÑ Ï≤òÎ¶¨ÌïúÎã§.
        if AutoSplitData['TimeCnt'] >= AutoSplitData['TimeTerm']:
            AutoSplitData['TimeCnt'] = 0
            AutoSplitData['OrderCnt'] += 1

            IsLastOrder = False
            if AutoSplitData['OrderCnt'] >= AutoSplitData['SplitCount']:
                IsLastOrder = True
                items_to_remove.append(AutoSplitData)
                
            nowPrice = myBinance.GetCoinNowPrice(binanceX, AutoSplitData['Ticker'])

            balance = binanceX.fetch_balance(params={"type": "spot"})
            time.sleep(0.1)
            
            

            usdt = float(balance['USDT']['free'])

            if AutoSplitData['SplitBuyVolume'] * nowPrice > usdt:
                AutoSplitData['SplitBuyVolume'] = (usdt * 0.99) / nowPrice #ÏàòÏàòÎ£å Î∞è Ïä¨Î¶¨ÌîºÏßÄ Í≥†Î†§



            if AutoSplitData['SplitBuyVolume'] * nowPrice < minimumMoney:
                msg = DIST + " " + AutoSplitData['Ticker'] + " ÌòÑÏû¨ Î≥¥Ïú† USDTÍ∞Ä ÏµúÏÜå Ï£ºÎ¨∏ Í∏àÏï°Î≥¥Îã§ Ï†ÅÏñ¥ÏÑú Îß§Ïàò Ï£ºÎ¨∏ÏùÑ Ï∑®ÏÜåÌï©ÎãàÎã§."
                print(msg)
                line_alert.SendMessage(msg)

                if IsLastOrder == False:
                    items_to_remove.append(AutoSplitData)
            else:


                data = binanceX.create_order(AutoSplitData['Ticker'], 'market', 'buy', AutoSplitData['SplitBuyVolume'])
                print(data)
                time.sleep(0.2)

                msg = DIST + " " + AutoSplitData['Ticker'] + " " + str(AutoSplitData['OrderVolume']) + "Í∞ú (" + str(nowPrice*AutoSplitData['OrderVolume']) +")ÏõêÏñ¥Ïπò " + str(AutoSplitData['SplitCount']) + "Î∂ÑÌï† Îß§Ïàò Ï§ëÏûÖÎãàÎã§.\n"
                msg += str(AutoSplitData['OrderCnt']) + "Î≤àÏß∏ Îß§Ïàò ÏàòÎüâ: " + str(AutoSplitData['SplitBuyVolume']) + "Í∞ú  (" + str(nowPrice*AutoSplitData['SplitBuyVolume']) +")ÏõêÏñ¥Ïπò Îß§Ïàò Ï£ºÎ¨∏ ÏôÑÎ£å!"
                if IsLastOrder == True:
                    msg += " ÎßàÏßÄÎßâ Îß§ÏàòÍπåÏßÄ Î™®Îëê ÏôÑÎ£å!"
                    
                print(msg)
                line_alert.SendMessage(msg)
        
       
#Î¶¨Ïä§Ìä∏ÏóêÏÑú Ï†úÍ±∞
for item in items_to_remove:
    try:
        AutoOrderList.remove(item)
    except Exception as e:
        print(e)


time.sleep(random.random()*0.1)
#ÌååÏùºÏóê Ï†ÄÏû•
with open(auto_order_file_path, 'w') as outfile:
    fcntl.flock(outfile, fcntl.LOCK_EX)
    json.dump(AutoOrderList, outfile)
    fcntl.flock(outfile, fcntl.LOCK_UN)
