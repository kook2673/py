#-*-coding:utf-8 -*-
'''
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Ìï¥Îãπ Ïª®ÌÖêÏ∏†Îäî Ï†úÍ∞Ä ÏßÅÏ†ë Ìà¨Ïûê ÌïòÍ∏∞ ÏúÑÌï¥ Ïù¥ Ï†ÑÎûµÏùÑ Ï∂îÍ∞Ä Í∞úÏÑ†Ìï¥ÏÑú Îçî Ï¢ãÏùÄ ÏÑ±Í≥ºÎ•º Î≥¥Ïó¨Ï£ºÎäî Í∞úÏù∏ Ï†ÑÎûµÏù¥ Ï°¥Ïû¨Ìï©ÎãàÎã§. 

Í≤åÎßåÏïÑ Ï∂îÍ∞Ä Í∞úÏÑ† Í∞úÏù∏ Ï†ÑÎûµÎì§..
https://blog.naver.com/zacra/223196497504

Í¥ÄÏã¨ ÏûàÏúºÏã† Î∂ÑÏùÄ ÏúÑ Ìè¨Ïä§ÌåÖÏùÑ Ï∞∏Í≥†ÌïòÏÑ∏Ïöî!

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

ÏΩîÎìú Ïù¥Ìï¥ÌïòÎäîÎç∞ ÎèÑÏõÄ ÎêòÎäî ÏÑ§Î™Ö Ï∞∏Í≥† ÏòÅÏÉÅ!
https://youtu.be/IViI5gofQf4?si=Fnqm4_OmVfLnHCWD


Í¥ÄÎ†® Ìè¨Ïä§ÌåÖ

https://blog.naver.com/zacra/223375538360

ÏúÑ Ìè¨Ïä§ÌåÖÏùÑ Íº≠ Ï∞∏Í≥†ÌïòÏÑ∏Ïöî!!!

üìå Í≤åÎßåÏïÑÏùò Î™®Îì† ÏΩîÎìúÎäî ÌäπÏ†ï Ï¢ÖÎ™© Ï∂îÏ≤úÏù¥ÎÇò Ìà¨Ïûê Í∂åÏú†Î•º ÏúÑÌïú Í≤ÉÏù¥ ÏïÑÎãôÎãàÎã§.  
Ï†úÏûëÏûêÏùò Í∞úÏù∏Ï†ÅÏù∏ Í≤¨Ìï¥Î•º Î∞îÌÉïÏúºÎ°ú Íµ¨ÏÑ±Îêú ÍµêÏú°Ïö© ÏòàÏãú ÏΩîÎìúÏù¥Î©∞, ÏàòÏùµÏùÑ Î≥¥Ïû•ÌïòÏßÄ ÏïäÏäµÎãàÎã§
Ïã§Ï†ú Ìà¨Ïûê ÌåêÎã® Î∞è Ïã§ÌñâÏùÄ Ï†ÑÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©Ïûê Î≥∏Ïù∏Ïùò Ï±ÖÏûÑÏûÖÎãàÎã§.

Ï£ºÏãù/ÏΩîÏù∏ ÏûêÎèôÎß§Îß§ FAQ
https://blog.naver.com/zacra/223203988739

FAQÎ°ú Ìï¥Í≤∞ ÏïàÎêòÎäî Í∏∞Ïà†Ï†ÅÏù∏ Î¨∏Ï†úÎäî ÌÅ¥ÎûòÏä§101 Í∞ïÏùòÏùò ÎåìÍ∏ÄÏù¥ÎÇò ÏúÑ Ìè¨Ïä§ÌåÖÏóê ÎåìÍ∏ÄÎ°ú ÏïåÎ†§Ï£ºÏÑ∏Ïöî.
ÌååÏù¥Ïç¨ ÏΩîÎî©Ïóê ÎåÄÌïú ÎãµÎ≥ÄÎßå Í∞ÄÎä•Ìï©ÎãàÎã§. ÌòÑÌñâÎ≤ï ÏÉÅ Ìà¨Ïûê Í¥ÄÎ†® ÏßàÎ¨∏ÏùÄ ÎãµÎ≥Ä Î∂àÍ∞ÄÌïòÎã§Îäî Ï†ê ÏïåÎ†§ÎìúÎ†§Ïöî!


'''


import ccxt

import myBinance
import ende_key  #ÏïîÎ≥µÌò∏ÌôîÌÇ§
import my_key    #ÏóÖÎπÑÌä∏ ÏãúÌÅ¨Î¶ø Ïï°ÏÑ∏Ïä§ÌÇ§

import time
import pandas as pd
import pprint
import datetime



def GetOhlcv2(binance, Ticker, period, year=2020, month=1, day=1, hour=0, minute=0):
    date_start = datetime.datetime(year, month, day, hour, minute)
    date_start_ms = int(date_start.timestamp() * 1000)

    final_list = []

    # OHLCV Îç∞Ïù¥ÌÑ∞Î•º ÏµúÎåÄ ÌïúÎèÑ(1000)ÎßåÌÅºÏùò Ï≤≠ÌÅ¨Î°ú Í∞ÄÏ†∏ÏòµÎãàÎã§.
    while True:
        # OHLCV Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
        ohlcv_data = binance.fetch_ohlcv(Ticker, period, since=date_start_ms)

        # Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Î£®ÌîÑÎ•º Ï§ëÎã®Ìï©ÎãàÎã§.
        if not ohlcv_data:
            break

        # Í∞ÄÏ†∏Ïò® Îç∞Ïù¥ÌÑ∞Î•º ÏµúÏ¢Ö Î¶¨Ïä§Ìä∏Ïóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.
        final_list.extend(ohlcv_data)

        # Îã§Ïùå Í∞ÄÏ†∏Ïò§Í∏∞Î•º ÏúÑÌï¥ ÏãúÏûë ÎÇ†ÏßúÎ•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
        date_start = datetime.datetime.utcfromtimestamp(ohlcv_data[-1][0] / 1000)
        date_start_ms = ohlcv_data[-1][0] + (ohlcv_data[1][0] - ohlcv_data[0][0])

        # ÏöîÏ≤≠ Í∞ÑÏùò ÏßßÏùÄ ÏãúÍ∞Ñ ÎåÄÍ∏∞Î•º ÏúÑÌï¥ sleepÏùÑ Ìè¨Ìï®Ìï©ÎãàÎã§.
        time.sleep(0.2)

    # ÏµúÏ¢Ö Î¶¨Ïä§Ìä∏Î•º DataFrameÏúºÎ°ú Î≥ÄÌôòÌï©ÎãàÎã§.
    df = pd.DataFrame(final_list, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
    df['datetime'] = pd.to_datetime(df['datetime'], unit='ms')
    df.set_index('datetime', inplace=True)
    
    return df





#ÏïîÎ≥µÌò∏Ìôî ÌÅ¥ÎûòÏä§ Í∞ùÏ≤¥Î•º ÎØ∏Î¶¨ ÏÉùÏÑ±Ìïú ÌÇ§Î•º Î∞õÏïÑ ÏÉùÏÑ±ÌïúÎã§.
simpleEnDecrypt = myBinance.SimpleEnDecrypt(ende_key.ende_key)


#ÏïîÌò∏ÌôîÎêú Ïï°ÏÑ∏Ïä§ÌÇ§ÏôÄ ÏãúÌÅ¨Î¶øÌÇ§Î•º ÏùΩÏñ¥ Î≥µÌò∏Ìôî ÌïúÎã§.
Binance_AccessKey = simpleEnDecrypt.decrypt(my_key.binance_access)
Binance_ScretKey = simpleEnDecrypt.decrypt(my_key.binance_secret)


# binance Í∞ùÏ≤¥ ÏÉùÏÑ±
binanceX = ccxt.binance(config={
    'apiKey': Binance_AccessKey, 
    'secret': Binance_ScretKey,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'future'
    }
})

tickers_prev = binanceX.fetch_tickers()

Tickers = list()

for ticker, coin_Data in tickers_prev.items():
    if "/USDT" in ticker and "-" not in ticker:
        print(ticker ,"added")
        Tickers.append(ticker)
        
        
print("len(Tickers) : ",len(Tickers))
            

pprint.pprint(Tickers)


coin_df_list = []

for ticker in Tickers:

    try:

        print("----->", ticker ,"<-----")
        df = GetOhlcv2(binanceX,ticker, '1d' ,2020, 1, 1, 0, 0) 
        
        
        df['value'] = df['close'] * df['volume']

        period = 14

        delta = df["close"].diff()
        up, down = delta.copy(), delta.copy()
        up[up < 0] = 0
        down[down > 0] = 0
        _gain = up.ewm(com=(period - 1), min_periods=period).mean()
        _loss = down.abs().ewm(com=(period - 1), min_periods=period).mean()
        RS = _gain / _loss

        df['RSI'] = pd.Series(100 - (100 / (1 + RS)), name="RSI")

        df['ma5_rsi_before'] = df['RSI'].rolling(5).mean().shift(1)
        df['ma5_rsi_before2'] = df['RSI'].rolling(5).mean().shift(2)

        df['prevRSI'] = df['RSI'].shift(1)
        df['prevRSI2'] = df['RSI'].shift(2)

        df['prevValue'] = df['value'].shift(1)
        df['prevValue2'] = df['value'].shift(2)

        df['prevClose'] = df['close'].shift(1)
        df['prevClose2'] = df['close'].shift(2)
        
        df['prevCloseW'] = df['close'].shift(7)
        
        df['prevCloseW2'] = df['close'].shift(14)
        
        df['prevCloseM'] = df['close'].shift(28)
        
        

        df['prevOpen'] = df['open'].shift(1)
        df['prevOpen2'] = df['open'].shift(2)

        df['prevLow'] = df['low'].shift(1)
        df['prevLow2'] = df['low'].shift(2)

        df['prevHigh'] = df['high'].shift(1)
        df['prevHigh2'] = df['high'].shift(2)

        df['prevChange'] = (df['prevClose'] - df['prevClose2']) / df['prevClose2'] #Ï†ÑÏùº Ï¢ÖÍ∞Ä Í∏∞Ï§Ä ÏàòÏùµÎ•†
        df['prevChange2'] = df['prevChange'].shift(1)



        df['box5_max'] = df['high'].rolling(5).max().shift(1)
        df['box5_min'] = df['low'].rolling(5).min().shift(1)      
        df['box5_max2'] = df['high'].rolling(5).max().shift(2)
        df['box5_min2'] = df['low'].rolling(5).min().shift(2)  
        
        df['box10_max'] = df['high'].rolling(10).max().shift(1)
        df['box10_min'] = df['low'].rolling(10).min().shift(1)      
        df['box10_max2'] = df['high'].rolling(10).max().shift(2)
        df['box10_min2'] = df['low'].rolling(10).min().shift(2)  
        
        df['box20_max'] = df['high'].rolling(20).max().shift(1)
        df['box20_min'] = df['low'].rolling(20).min().shift(1)      
        df['box20_max2'] = df['high'].rolling(20).max().shift(2)
        df['box20_min2'] = df['low'].rolling(20).min().shift(2)  
        
        

        df['prevChangeMa'] = df['prevChange'].rolling(window=20).mean()


        df['Disparity5'] = df['prevClose'] / df['prevClose'].rolling(window=5).mean() * 100.0
        df['Disparity20'] = df['prevClose'] / df['prevClose'].rolling(window=20).mean() * 100.0

        df['ma3_before'] = df['close'].rolling(3).mean().shift(1)
        df['ma3_before2'] = df['close'].rolling(3).mean().shift(2)


        df['ma5_before'] = df['close'].rolling(5).mean().shift(1)
        df['ma5_before2'] = df['close'].rolling(5).mean().shift(2)

        df['ma10_before'] = df['close'].rolling(10).mean().shift(1)
        df['ma10_before2'] = df['close'].rolling(10).mean().shift(2)

        df['ma20_before'] = df['close'].rolling(20).mean().shift(1)
        df['ma20_before2'] = df['close'].rolling(20).mean().shift(2)


        df['ma60_before'] = df['close'].rolling(60).mean().shift(1)
        df['ma60_before2'] = df['close'].rolling(60).mean().shift(2)
        

        df['value_ma'] = df['value'].rolling(window=10).mean().shift(1)
        
        
        df['prevChangeW'] = (df['prevClose'] - df['prevCloseW']) / df['prevCloseW']
        df['prevChangeW2'] = (df['prevClose'] - df['prevCloseW2']) / df['prevCloseW2'] 
        df['prevChangeM'] = (df['prevClose'] - df['prevCloseM']) / df['prevCloseM'] 

        df.dropna(inplace=True) #Îç∞Ïù¥ÌÑ∞ ÏóÜÎäîÍ±¥ ÎÇ†Î¶∞Îã§!

    
        pprint.pprint(df)
        data_dict = {ticker: df}
        coin_df_list.append(data_dict)

        time.sleep(0.2)

    except Exception as e:
        print("Exception ", e)


# Combine the OHLCV data into a single DataFrame
combined_df = pd.concat([list(data_dict.values())[0].assign(ticker=ticker) for data_dict in coin_df_list for ticker in data_dict])

# Sort the combined DataFrame by date
combined_df.sort_index(inplace=True)


pprint.pprint(combined_df)
print(" len(combined_df) ", len(combined_df))


combined_df.to_csv("./BinanceDataAll.csv", index=True) 

print("Save Done!!")